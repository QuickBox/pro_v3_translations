#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_es
# File Description: Spanish language file
# File Version: 1.0.57
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2022, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="limpiar la memoria caché..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="limpiando el registro de carga de rclone..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="error: archivo de registro no presente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="esperando la respuesta del sistema..."
	quickbox::dashboard::log "${text}"
}
################################################################################
# Locks
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} se está ejecutando actualmente
el proceso se reanudará cuando ${quickbox_lock} termine"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="eliminar los bloqueos de software..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="comprobando y realizando actualizaciones de apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="tratando de resolver el bloqueo de dpkg..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get upgrade se ha completado con éxito"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="la comprobación de apt-get ha fallado, puede tener paquetes rotos"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Install
################################################################################
quickbox::lang::install::header() {
	declare text="${software_title} will now be installed
this process may take a few minutes..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="parece que rTorrent no está instalado

rTorrent 0.9.8 se instalará ahora, por favor espere ya que esto puede
tardar unos minutos (dependiendo de las especificaciones del sistema) en instalarse"
	else
		declare text="${software_title} se instalará ahora
este proceso puede tardar unos minutos..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="añadiendo claves y fuentes adicionales para ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="instalando ${software_title} dependencias..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="construyendo ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="construyendo mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="construyendo xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="construyendo libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="construyendo rtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="configurando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="haciendo una copia de seguridad de ${software_title} configuración..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="iniciando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="${software_title} instalación completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="${software_title} se reinstalará ahora
este proceso puede tardar unos minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} reinstalación completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} será eliminado
este proceso puede tardar unos minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="deteniendo ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="eliminando ${software_title} dependencias..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="eliminando ${software_title} archivos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="${software_title} eliminación completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="${software_title} se actualizará ahora
este proceso puede tardar unos minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="actualizando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="${software_title} actualización completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="quickbox usuario creado:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"quickbox usuario"} borrado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="usuario: ${username}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password() {
	declare text="contraseña: ${password}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="contraseña de ${username:-"quickbox usuario"} actualizada"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"quickbox usuario"} prohibido"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"quickbox usuario"} desprotegido"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"quickbox usuario"} degradado de admin"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"quickbox usuario"} promovido a admin"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::username::specified() {
	declare text="error: nombre de usuario no especificado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::example() {
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuario ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d algunodominio.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u user -d algunodominio.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.emby.dominio ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.komga.dominio ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.overseerr.dominio ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.plex.dominio ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuario ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d algunodominio.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u user -d algunodominio.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.emby.dominio ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.komga.dominio ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.overseerr.dominio ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d alguno.plex.dominio ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuario ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d algunodominio.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuario ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d algunodominio.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::note() {
	[[ ${software_name} == "bazarr" && ${is4k} == 1 ]] && declare software_name="bazarr4k"
	[[ ${software_name} == "radarr" && ${is4k} == 1 ]] && declare software_name="radarr4k"
	[[ ${software_name} == "sonarr" && ${is4k} == 1 ]] && declare software_name="sonarr4k"
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="instala la última versión de ${branch} de ${software_name} para el usuario"
		[[ -n ${dmn} ]] && declare text="instala un certificado ssl que se usará para el tablero en el dominio especificado"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="instala la última versión de ${branch} de ${software_name} para el usuario y prepara el certificado ssl para el dominio"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="instala un certificado ssl para el dominio especificado"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="instala un certificado ssl para el dominio emby especificado"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="instala un certificado ssl para el dominio komga especificado"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="instala un certificado ssl para el dominio de supervisor especificado"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="instala un certificado ssl para el dominio plex especificado"
		[[ -n ${version} ]] && declare text="instala la última versión de ${version[*]} de ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="instala la última ${branch} versión de ${software_name}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="reinstala la última versión de ${branch} de ${software_name} para el usuario"
		[[ -n ${dmn} ]] && declare text="reinstala el certificado ssl utilizado para el tablero en el dominio especificado"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="reinstala la última versión de ${branch} de ${software_name} para el usuario y prepara el certificado ssl para el dominio"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="reinstala un certificado ssl para el dominio especificado"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="reinstala un certificado ssl para el dominio emby especificado"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="reinstala un certificado ssl para el dominio komga especificado"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="reinstala un certificado ssl para el dominio de supervisor especificado"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="reinstala un certificado ssl para el dominio plex especificado"
		[[ -n ${version} ]] && declare text="reinstala la última versión de ${version[*]} de ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="instala la última ${branch} versión de ${software_name}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="elimina ${software_name} para el usuario"
		[[ -n ${dmn} && -z ${usr} && -z ${version} ]] && declare text="elimina el certificado ssl del dominio especificado"
		[[ -n ${version} && -z ${dmn} ]] && declare text="elimina ${software_name}"
		[[ -z ${usr} && -z ${version} && -z ${dmn} ]] && declare text="elimina ${software_name}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="actualiza ${software_name} a la última versión de ${branch} para el usuario"
		[[ -n ${dmn} ]] && declare text="actualiza el certificado ssl para el dominio especificado, para usar con el tablero"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="actualiza el certificado ssl para el dominio especificado"
		[[ -n ${version} ]] && declare text="actualiza ${software_name} a la última versión de ${version}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="instala la última ${branch} versión de ${software_name}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${software_name}
${software_title} instalado en el puerto: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado en el puerto: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${username}/${software_name}
nombre de usuario: ${username}
contraseña: admin123
ubicación de la base de datos: /home/${username}/.config/calibre/library
${software_title} instalado en el puerto: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> versión de rTorrent: ${rtorrent_version}
> versión de libtorrent: ${libtorrent_version}
> ruta del socket: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${software_name}
> ruta del socket: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${admin_name}/${software_name}
${software_title} instalado en el puerto: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard() {
	declare text="dominio: https://${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard::custom() {
	declare text="certificado ssl para ${domain} instalado a:
/etc/nginx/ssl/${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="actualización de la base de datos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="desactivar los rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="habilitar los rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="el directorio requerido no existe..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="no puede pasar al $1..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="no se ha podido instalar un paquete necesario $1..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="status: ok. ¡FlareSolverr está listo!
${software_title} instalado en el puerto: ${software_web_port}"
		quickbox::dashboard::log "${text}"
	else
		declare text="Parece que algo salió mal"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::notifiarr::access() {
	if [[ ${#notifiarr_user_password} -lt 9 ]]; then
		declare text="acceder a ${software_title} en:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado en el puerto: ${software_web_port}
nombre de usuario: ${username}
contraseña: ${notifiarr_user_password}

Nota: La contraseña tiene menos de 9 caracteres, la he modificado para agregar caracteres adicionales.
      Puede iniciar sesión con la contraseña dada y cambiarla en la configuración".
		quickbox::dashboard::log "${text}"
	else
		declare text="acceder a ${software_title} en:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado en el puerto: ${software_web_port}
nombre de usuario: ${username}
contraseña: ${notifiarr_user_password}"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::novnc::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}vnc/vnc.html?resize=remote&path=${username}/websockify
${software_title} instalado en el puerto: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acceder a ${software_title} en:
https://${overseerr_web_root}/"
	else
		# trunk-ignore(shellcheck/SC2001)
		quickbox_web_root=$(echo "${quickbox_web_root}" | sed 's:/*$::')
		declare text="acceder a ${software_title} en:
${quickbox_web_root}:${software_web_port}/
${software_title} instalado en el puerto: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="reclamando servidor plex para ${username}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}web/
${software_title} instalado en el puerto: ${software_web_port}

> si no lo ha hecho y/o no está seguro de cómo
reclama tu servidor plex por favor sigue esta guía:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="Por favor, introduzca sus credenciales de Plex (nombre de usuario/contraseña/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="Estas credenciales no se guardarán ni compartirán fuera de esta instancia."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="Correo electrónico: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="Contraseña: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [Dejar en blanco si no se ha establecido 2FA] "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="Se necesita el nombre de usuario y la contraseña para descargar la actualización de PlexPass."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declare text="Nombre de usuario y/o contraseña incorrectos"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="Fallo en el inicio de sesión, información de depuración:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="No se pudo recuperar la URL de descarga."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="Fallo al analizar la respuesta HTML."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="Descargando la actualización de Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="La descarga falló con el código de error ${code}, ${error}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="Instalando la nueva versión de Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="Plex ha sido actualizado con éxito."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex ya está actualizado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="acceder a ${software_title} en:
${quickbox_web_root}${username}/${software_name}/
${software_title} instalado en el puerto: ${software_web_port}

> nombre de usuario = ${username}
> contraseña = pyload

> Inicie sesión en pyload y cambie la contraseña por defecto por seguridad.
La contraseña se puede cambiar en la pestaña [usuarios] de pyload."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} instalado en el puerto: ${software_daemon_port}
  
> Por favor, instale quassel-client en su ordenador personal 
y conéctese al recién creado ${software_title} Core 
para configurar su cuenta en
${server_ip}:${software_daemon_port}

> Descargue quassel-client desde lo siguiente
https://quassel-irc.org/downloads"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
Por favor, visite https://console.developers.google.com y cree un proyecto.
Tendrá que anotar su client_id y client_secret.
También puede visitar el siguiente artículo de la Base de Conocimientos para ver un recorrido:
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

Una vez que tengas tu client_id y client_secret pulsa cualquier tecla para continuar.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="Introduzca sus datos de conexión a continuación".
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="ID de cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="Secreto del cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="Contraseña de cifrado: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="Contraseña de sal: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="La contraseña de sal no puede ser la misma que la contraseña de cifrado".
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="Por favor, confirme los siguientes datos antes de continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="ID de cliente: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="Secreto del cliente: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="Contraseña de cifrado: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="Contraseña de sal: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="Si está satisfecho con la configuración anterior, pulse Y para continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone::access() {
	declare text="${software_title} instalado
  
> Ejecute el siguiente comando para finalizar la configuración:
runuser -l ${username} -c \"rclone config reconnect gdrive:\"

> Para obtener más información sobre cómo instalar rclone, visite:
https://quickbox.io/knowledge-base/applications/rclone/how-to-install-rclone/
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} Servidor instalado
  
> Instale x2go-client en su computadora personal
y conéctese al servidor ${software_title} recién creado
usando lo siguiente:
Anfitrión:			${server_ip}
Iniciar sesión:		${username}
Puerto SSH:			4747
Tipo de sesión:		XFCE o MATE

> Descargue x2go-client desde lo siguiente:
https://wiki.x2go.org/doku.php/doc:installation:x2goclient"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="La configuración de ZNC se ejecutará ahora. Por favor, responda a las siguientes preguntas:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="comprobando con el servidor ntp..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="ejecutando actualizaciones de apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="comprobando las dependencias iniciales..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="descargando actualización v3..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="comprobando dependencias de caja rápida..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="instalando dependencias base: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="instalando dependencias web: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="instalando dependencias de python:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="guardando dependencias instaladas..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="actualizando pip..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="actualizando lshell..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="actualizando iris..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="actualizando bibliotecas de caja rápida..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="actualizando trabajos cron..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="actualizando configuraciones de sudo..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="actualizando curl..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="comprobando php..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="configurando los comandos de quickbox pro..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="actualizando el tablero de Quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="actualizando la base de datos de Quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="actualizando el autocompletado de Quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="configurando permisos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="limpiando archivos de actualización..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="actualización completa!"
	quickbox::dashboard::log "${text}"
}
