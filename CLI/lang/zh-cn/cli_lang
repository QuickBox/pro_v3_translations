#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_zh-cn
# File Description: Simplified Chinese language file
# File Version: 1.0.72
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2023, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="清理内存缓存..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="清理rclone上传日志..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="错误: 日志文件不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="等待系统响应..."
	quickbox::dashboard::log "${text}"
}
################################################################################
# Locks
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} 当前正在运行
${quickbox_lock} 完成后进程将恢复"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="移除软件锁..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="检查并执行 apt 更新..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="试图解决 dpkg 锁..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get 升级成功完成"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="apt-get check 失败, 你可能有损坏的包"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Install
################################################################################
quickbox::lang::install::header() {
	declare text="现在将安装 ${software_title}
这个过程可能需要几分钟..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="好像没有安装 rTorrent

rTorrent 0.9.8 现在将安装, 请稍等一下
安装需要几分钟 (取决于系统规格) "
	else
		declare text="现在将安装 ${software_title}
这个过程可能需要几分钟..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="为 ${software_title} 添加其他密钥和源..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="正在安装 ${software_title} 依赖项..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="构建 ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="构建 mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="构建 xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="构建 libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="构建 rtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="配置 ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="备份 ${software_title} 配置..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="开始 ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="${software_title} 安装完成"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="现在将重新安装 ${software_title}
这个过程可能需要几分钟..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} 重新安装完成"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} 现在将被删除
这个过程可能需要几分钟..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="正在停止 ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="删除 ${software_title} 依赖项..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="删除 ${software_title} 文件..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="${software_title} 移除完成"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="现在将更新 ${software_title}
这个过程可能需要几分钟..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="正在更新 ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="${software_title} 更新完成"
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="quickbox 用户创建: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"quickbox 用户"} 已删除"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="用户: ${username}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password() {
	declare text="密码: ${password}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="${username:-"quickbox 用户"} 的密码已更新"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"quickbox 用户"} 禁止"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"quickbox 用户"} 解禁"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"quickbox 用户"} 从管理员降级"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"quickbox 用户"} 晋升为管理员"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::username::specified() {
	declare text="错误: 未指定用户名"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::example() {
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u 用户 ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d 一些领域.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u 用户 -d 一些领域.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.emby.领域 ${option[*]}"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.jellyfin.领域 ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.komga.领域 ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.overseerr.领域 ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.plex.领域 ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u 用户 ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d 一些领域.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u 用户 -d 一些领域.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.emby.领域 ${option[*]}"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.jellyfin.领域 ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.komga.领域 ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.overseerr.领域 ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d 一些.plex.领域 ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u 用户 ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d 一些领域.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u 用户 ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d 一些领域.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::note() {
	[[ ${software_name} == "bazarr" && ${is4k} == 1 ]] && declare software_name="bazarr4k"
	[[ ${software_name} == "radarr" && ${is4k} == 1 ]] && declare software_name="radarr4k"
	[[ ${software_name} == "sonarr" && ${is4k} == 1 ]] && declare software_name="sonarr4k"
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="为用户安装 ${software_name} 的最新 ${branch} 版本"
		[[ -n ${rclone_remote} ]] && declare text="为使用 ${rclone_remote} 的用户安装最新的 ${branch} 版本的 ${software_name}"
		[[ -n ${encrypted} ]] && declare text="为用户安装最新的 ${branch} 版本的 ${software_name} 并进行加密"
		[[ -n ${dmn} ]] && declare text="在指定域上安装用于仪表板的 ssl 证书"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="为用户安装最新的 ${branch} 版本的 ${software_name} 并为域暂存 ssl 证书"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="为指定域安装 ssl 证书"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="为指定的 emby 域安装 ssl 证书"
		[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="为指定的 jellyfin 域安装 ssl 证书"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="为指定的 komga 域安装 ssl 证书"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="为指定的监督域安装 ssl 证书"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="为指定的 plex 域安装 ssl 证书"
		[[ -n ${version} ]] && declare text="安装 ${software_name} 的最新 ${version[*]} 版本"
		[[ -n ${branch} && -z ${usr} ]] && declare text="安装 ${software_name} 的最新 ${branch} 版本"
		[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="安装最新的 ${branch} 版本的 ${software_name} 指定数据目录"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="为用户重新安装 ${software_name} 的最新 ${branch} 版本"
		[[ -n ${rclone_remote} ]] && declare text="为使用 ${rclone_remote} 的用户重新安装最新的 ${branch} 版本的 ${software_name}"
		[[ -n ${encrypted} ]] && declare text="为用户重新安装最新的 ${branch} 版本的 ${software_name} 并进行加密"
		[[ -n ${dmn} ]] && declare text="重新安装指定域上用于仪表板的 ssl 证书"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="为用户重新安装最新的 ${branch} 版本的 ${software_name} 并为域暂存 ssl 证书"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="重新安装指定域的 ssl 证书"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="为指定的 emby 域重新安装 ssl 证书"
		[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="为指定的 jellyfin 域重新安装 ssl 证书"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="为指定的 komga 域重新安装 ssl 证书"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="为指定的监督域重新安装 ssl 证书"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="为指定的 plex 域重新安装 ssl 证书"
		[[ -n ${version} ]] && declare text="重新安装 ${software_name} 的最新 ${version[*]} 版本"
		[[ -n ${branch} && -z ${usr} ]] && declare text="重新安装 ${software_name} 的最新 ${branch} 版本"
		[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="重新安装 ${software_name} 的最新 ${branch} 版本 指定数据目录"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="为用户删除 ${software_name}"
		[[ -n ${dmn} && -z ${usr} && -z ${version} ]] && declare text="从指定域中删除 ssl 证书"
		[[ -n ${version} && -z ${dmn} ]] && declare text="移除 ${software_name}"
		[[ -z ${usr} && -z ${version} && -z ${dmn} ]] && declare text="移除 ${software_name}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="为用户更新 ${software_name} 到最新的 ${branch} 版本"
		[[ -n ${dmn} ]] && declare text="更新指定域的 ssl 证书，与仪表板一起使用"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="更新指定域的 ssl 证书"
		[[ -n ${version} ]] && declare text="更新 ${software_name} 到最新 ${version} 版本"
		[[ -n ${branch} && -z ${usr} ]] && declare text="更新 ${software_name} 的最新 ${branch} 版本"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="访问 ${software_title}: 
${quickbox_web_root}${software_name}
${software_title} 安装在端口: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="访问 ${software_title}: 
${quickbox_web_root}${username}/${software_name}
${software_title} 安装在端口: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::airsonic::access() {
	declare text="访问 ${software_title}:
${quickbox_web_root}${username}/${software_name}
用户名: admin
密码: admin
${software_title} 安装在端口：${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="访问 ${software_title}: 
${quickbox_web_root}${username}/${software_name}
用户名: ${username}
密码: admin123
数据库位置: /home/${username}/.config/calibre/library
${software_title} 安装在端口: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> rTorrent 版本: ${rtorrent_version}
> libtorrent 版本: ${libtorrent_version}
> 套接字路径: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="访问 ${software_title}: 
${quickbox_web_root}${software_name}
> 套接字路径: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="访问 ${software_title}: 
${quickbox_web_root}${admin_name}/${software_name}
${software_title} 安装在端口: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard() {
	declare text="域名: https://${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard::custom() {
	declare text="${domain} 的 ssl 证书安装到:
/etc/nginx/ssl/${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="正在更新数据库..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="禁用公共跟踪器..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="启用公共跟踪器..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="所需目录不存在..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="无法移动到 $1..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="无法安装所需的软件包 $1..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="状态: OK. FlareSolverr已经准备好了!
${software_title} 安装在端口: ${software_web_port}"
		quickbox::dashboard::log "${text}"
	else
		declare text="看起来好像出了点问题"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::jellyfin::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyfin_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="访问 ${software_title} 在：
https://${jellyfin_web_root}/"
	else
		declare text="访问 ${software_title} 在：
${quickbox_web_root}${username}/${software_name}/
${software_title} 安装在端口：${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::notifiarr::access() {
	if [[ ${#notifiarr_user_password} -lt 9 ]]; then
		declare text="访问 ${software_title} 在:
${quickbox_web_root}${username}/${software_name}
${software_title} 安装在端口：${software_web_port}
用户名: ${username}
密码: ${notifiarr_user_password}

注意: 您的密码少于 9 个字符.
     Notifiarr 要求密码至少包含 9 个字符.
     我已对此进行了修改以添加其他随机字符.
     您可以使用给定的密码登录并在设置中更改它.
     --------------------
     为方便起见, 新密码位于:
     /home/${username}/.config/Notifiarr/config/.notifiarr.pass.txt"
		quickbox::dashboard::log "${text}"
	else
		declare text="访问 ${software_title} 在:
${quickbox_web_root}${username}/${software_name}
${software_title} 安装在端口：${software_web_port}
用户名: ${username}
密码: ${notifiarr_user_password}"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::novnc::access() {
	declare text="访问 ${software_title} 在:
${quickbox_web_root}vnc/vnc.html?resize=remote&path=${username}/websockify
${software_title} 安装在端口: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::jellyseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="访问 ${software_title} 在:
https://${jellyseerr_web_root}/"
	else
		#quickbox_web_root=$(echo "${quickbox_web_root}" | sed 's|/*$||' | sed 's|https|http|g')
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="访问 ${software_title} 在:
http://${server_ip}:${software_web_port}/
${software_title} 安装在端口：${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="访问 ${software_title} 在:
https://${overseerr_web_root}/"
	else
		#quickbox_web_root=$(echo "${quickbox_web_root}" | sed 's|/*$||' | sed 's|https|http|g')
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="访问 ${software_title} 在:
http://${server_ip}:${software_web_port}/
${software_title} 安装在端口：${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex_directory_warning() {
	declare text="自定义数据目录：'${software_install_directory}' 已经存在.
使用 '${software_install_directory}/plex' 代替."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="为 ${username} 申请 plex 服务器..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="访问 ${software_title} 在:
${quickbox_web_root}web/
${software_title} 安装在端口: ${software_web_port}

> 如果你还没有, 或者不确定如何 
声称你的plex服务器, 请遵循以下指南:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="请输入你的Plex凭证 (用户名/密码/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="这些凭证不会被保存或在本实例之外共享."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="电子邮件."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="密码："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [如果没有设置2FA就留空] "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="下载PlexPass更新需要用户名和密码."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declare text="用户名和/或密码不正确"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="登录失败, 调试信息："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="无法检索到下载URL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="解析HTML响应失败."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="正在下载Plex更新..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="下载失败, 错误代码 ${code}, ${error}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="正在安装新的Plex版本..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="Plex已成功更新."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex已经是最新的了."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="访问 ${software_title} 在:
${quickbox_web_root}${username}/${software_name}/
${software_title} 安装在端口: ${software_web_port} 

> 帐号 = ${username}
> 密码 = pyload

> 登录 pyload 并修改默认密码以保证安全.
你的密码可以在 pyload 的 [users] 标签下修改."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} 安装在端口: ${software_daemon_port}
  
> 请在您的个人电脑上安装 quassel-client 
并连接到新创建的 ${software_title} 核心服务器 核心 
来设置你的账户:
${server_ip}:${software_daemon_port}

> 从下面下载 quassel-client:
https://quassel-irc.org/downloads"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
请访问 https://console.developers.google.com 并创建一个项目.
你需要记下你的 client_id 和 client_secret.
你也可以访问下面的知识库文章了解一下操作方法: 
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

一旦你有了你的 client_id 和 client_secret 按任意键继续.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="在下面输入你的连接细节."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="客户 ID: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="秘密客户: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="加密密码: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="盐的密码: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="盐密码不能与加密密码相同."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="在继续之前请确认以下细节..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="客户 ID: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="秘密客户: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="加密密码: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="盐的密码: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="如果你对上述设置感到满意, 按 Y 键继续..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone::access() {
	declare text="${software_title} 已安装

> 有关如何安装 rclone 的更多信息，请访问：
https://quickbox.io/knowledge-base/applications/rclone/how-to-install-rclone/
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::sonarrv4::update::error() {
	declare text
	text="$(tput setaf 7)Sonarr v4 $(tput setaf 1)不能$(tput setaf 7) 从 v3 更新.
请卸载 v3 并安装 v4.$(tput sgr0)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::vpnzip::access() {
	declare text="下载 ${software_title} 配置文件：
${quickbox_web_root}${username}/ovpn.zip
> 在任何 OpenVPN 客户端中使用"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} 服务器已安装

> 请在您的个人电脑上安装 x2go-client
并连接到新创建的 ${software_title} 服务器
使用以下内容:
主机:		${server_ip}
登录:		${username}
SSH 端口:	4747
会话类型:	XFCE 或 MATE

> 从以下下载 x2go-client:
https://wiki.x2go.org/doku.php/doc:installation:x2goclient"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="现在将运行 ZNC 配置. 请回答以下提示:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="正在检查 ntp 服务器..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="正在运行 apt 更新..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="检查初始依赖项..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="正在下载 v3 更新..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="正在检查快速框依赖项..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="安装基本依赖项: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="安装网络依赖项: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="安装python依赖项: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="保存已安装的依赖项..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="更新点..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="更新 lshell..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="更新虹膜..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="更新快速箱库..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="更新 cron 作业..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="更新 sudo 配置..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="更新卷曲..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="检查 php..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="配置 quickbox pro 命令..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="更新快速箱仪表板..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="更新快速箱数据库..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="更新快速框自动完成..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="配置权限..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="清理更新文件..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="更新完成！"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Manager - /opt/quickbox/system/manage :: `-s` | case: software)
################################################################################

### `-o backup` | case: backup)

quickbox::lang::backup::configf() {
	declare text="${software_name} 的配置文件正在备份."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::error() {
	declare text="配置文件 ${softwareConf} 不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::success() {
	declare text="配置文件已备份."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::error() {
	declare text="${software_title} 安装目录不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir() {
	declare text="现在正在备份 ${software_title} (${backup_version}) 的安装目录."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configdir() {
	declare text="现在正在备份 ${software_title} 的配置目录."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::success() {
	backup_version="$(tput setaf 5)${backup_version}$(tput setaf 2)"
	declare text="${software_title} (${backup_version}) 已备份."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o restore` | case: restore)

quickbox::lang::restore::configf::error() {
	declare text="备份文件 ${backupConf} 不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::restore::configf::success() {
	declare text="备份文件已恢复."
	quickbox::dashboard::log "${text}"
}

### `-o default` | case: default)

quickbox::lang::default::configf::error() {
	declare text="默认配置 ${defaultConf} 文件不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::default::configf::success() {
	declare text="默认配置文件已恢复."
	quickbox::dashboard::log "${text}"
}

### `-o rollback` | case: rollback)

quickbox::lang::rollback::installdir::error() {
	declare text="${software_title} 安装目录不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::version() {
	declare text="版本："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::date() {
	declare text="日期："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection() {
	declare text="从下面的列表中选择一个数字进行回滚
到 ${software_title} 的先前版本："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::invalid() {
	declare text="无效选择. 请重试."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::software::error() {
	declare text="${software_title} 应用程序备份不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::config::error() {
	declare text="${software_title} 配置备份不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="您已为 ${software_title} 选择了版本 ${version}.
应用程序包：${app_package}
配置包：${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::selection::confirm() {
	declare text="您确定要继续回滚吗? (y/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::cancelled() {
	declare text="回滚已取消."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::Continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} 现在正在回滚到版本 ${version}."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} (${version}) 已回滚."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o delete` | case: delete)

quickbox::lang::delete::selection::version() {
	declare text="版本："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::date() {
	declare text="日期："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection() {
	declare text="从下面的列表中选择一个数字来删除
${software_title} 的先前备份："
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::invalid() {
	declare text="无效选择. 请重试."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::software::error() {
	declare text="${software_title} 应用程序备份不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::config::error() {
	declare text="${software_title} 配置备份不存在."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="您已为 ${software_title} 选择了版本 ${version}.
应用程序包：${app_package}
配置包：${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::selection::confirm() {
	declare text="您确定要继续删除吗? (y/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::cancelled() {
	declare text="备份删除已取消."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::Continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} 备份 (${version}) 现已删除."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} 备份 (${version}) 已被删除."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}
