#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_fr
# File Description: French lang file
# File Version: 1.0.50
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2022, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="Nettoyage du cache de la mémoire..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="Nettoyage du journal de transferts rclone..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="ERREUR:: fichier journal non présent."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="Attente d'une réponse du système..."
	quickbox::dashboard::log "${text}"
}
################################################################################
# Verrous
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} est actuellement en cours d'exécution
Le processus reprendra une fois que ${quickbox_lock} sera terminé."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="Suppression des verrous logiciels..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="Vérification et exécution des mises à jour apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="Tentative de résolution des verrous dpkg..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get upgrade s'est terminé avec succès."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="La vérification apt-get a échoué, il se peut que des paquets soient endommagés."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Installer
################################################################################
quickbox::lang::install::header() {
	declare text="${software_title} va maintenant être installé.
Ce processus peut prendre quelques minutes..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="Il semble que rTorrent ne soit pas installé

rTorrent 0.9.8 va maintenant être installé, veuillez patienter 
car cela peut prendre quelques minutes (selon le système)."
	else
		declare text="${software_title} va maintenant être installé
Ce processus peut prendre quelques minutes..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="Ajout de clés et de sources supplémentaires pour ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="Installation des dépendances de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="Construction de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="Construction de mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="Construction de xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="Construction de libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="Construction de rTorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="Configuration de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="Sauvegarde de la configuration de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="Démarrage de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="Installation de ${software_title} terminée."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="${software_title} va maintenant être réinstallé.
Ce processus peut prendre quelques minutes..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} a été réinstallé avec succès."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} va maintenant être supprimé
Ce processus peut prendre quelques minutes..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="Arrêt de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="Suppression des dépendances pour ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="Suppression des fichiers de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="Désinstallation de ${software_title} terminée."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="${software_title} va maintenant être mis à jour
Ce processus peut prendre quelques minutes..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="Mise à jour de ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="Mise à jour de ${software_title} terminée."
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="Utilisateur QuickBox créé:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"l'utilisateur quickbox"} a été supprimé."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="Utilisateur: ${username}."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password() {
	declare text="Mot de passe: ${password}."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="Le mot de passe de ${username:-"l'utilisateur quickbox"} a été mis à jour."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"l'utilisateur quickbox"} est desormais banni."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"l'utilisateur quickbox"} n'est plus banni."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"l'utilisateur quickbox"} a été rétrogradé du rang d'admin."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"l'utilisateur quickbox"} a été promu au rang d'admin."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::username::specified() {
	declare text="ERREUR:: Le nom d'utilisateur n'est pas spécifié."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::example() {
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u utilisateur ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d quelquesdomaine.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u utilisateur -d quelquesdomaine.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.emby.domaine ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.komga.domaine ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.overseerr.domaine ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.plex.domaine ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u utilisateur ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d quelquesdomaine.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u utilisateur -d quelquesdomaine.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.emby.domaine ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.komga.domaine ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.overseerr.domaine ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d quelques.plex.domaine ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u utilisateur ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d quelquesdomaine.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u utilisateur ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d quelquesdomaine.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::note() {
	[[ ${software_name} == "radarr" && ${is4k} == 1 ]] && declare software_name="radarr4k"
	[[ ${software_name} == "sonarr" && ${is4k} == 1 ]] && declare software_name="sonarr4k"
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="installe la dernière version ${branch} de ${software_name} pour l'utilisateur"
		[[ -n ${dmn} ]] && declare text="installe un certificat ssl à utiliser pour le tableau de bord sur le domaine spécifié"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="installe la dernière version ${branch} de ${software_name} pour l'utilisateur et met en place le certificat ssl pour le domaine"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="installe un certificat ssl pour le domaine spécifié"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="installe un certificat ssl pour le domaine emby spécifié"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="installe un certificat ssl pour le domaine komga spécifié"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="installe un certificat ssl pour le domaine overseerr spécifié"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="installe un certificat ssl pour le domaine plex spécifié"
		[[ -n ${version} ]] && declare text="installe la dernière version ${version[*]} de ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="installe la dernière version ${branch} de ${software_name}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="réinstalle la dernière version ${branch} de ${software_name} pour l'utilisateur"
		[[ -n ${dmn} ]] && declare text="réinstalle le certificat ssl utilisé pour le tableau de bord sur le domaine spécifié"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="réinstalle la dernière version ${branch} de ${software_name} pour l'utilisateur et met en place le certificat ssl pour le domaine"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="réinstalle un certificat ssl pour le domaine spécifié"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="réinstalle un certificat ssl pour le domaine emby spécifié"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="réinstalle un certificat ssl pour le domaine komga spécifié"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="réinstalle un certificat ssl pour le domaine overseerr spécifié"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="réinstalle un certificat ssl pour le domaine plex spécifié"
		[[ -n ${version} ]] && declare text="réinstalle la dernière version ${version[*]} de ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="installe la dernière version ${branch} de ${software_name}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="supprime ${software_name} pour l'utilisateur"
		[[ -n ${dmn} && -z ${usr} && -z ${version} ]] && declare text="supprime le certificat ssl du domaine spécifié"
		[[ -n ${version} && -z ${dmn} ]] && declare text="supprime ${software_name}"
		[[ -z ${usr} && -z ${version} && -z ${dmn} ]] && declare text="supprime ${software_name}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="met à jour ${software_name} vers la dernière version de ${branch} pour l'utilisateur"
		[[ -n ${dmn} ]] && declare text="met à jour le certificat ssl pour le domaine spécifié, à utiliser avec le tableau de bord"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="met à jour le certificat ssl pour le domaine spécifié"
		[[ -n ${version} ]] && declare text="met à jour ${software_name} vers la dernière version de ${version}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="installe la dernière version ${branch} de ${software_name}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="Accédez à ${software_title} à l'adresse:
${quickbox_web_root}${software_name}
${software_title} installé sur le port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="Accédez à ${software_title} à l'adresse:
${quickbox_web_root}${username}/${software_name}
${software_title} installé sur le port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="Accéder à ${software_title} à l'adresse:
${quickbox_web_root}${username}/${software_name}
Nom d'utilisateur: ${username}
Mot de passe: admin123
Emplacement de la base de données: /home/${username}/.config/calibre/library
${software_title} installé sur le port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> Version de rTorrent: ${rtorrent_version}
> Version de libtorrent: ${libtorrent_version}
> Chemin du socket: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="Accédez à ${software_title} à l'adresse:
${quickbox_web_root}${software_name}
> Chemin du socket: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="Accédez à ${software_title} à l'adresse:
${quickbox_web_root}${admin_name}/${software_name}
${software_title} installé sur le port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard() {
	declare text="domaine: https://${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard::custom() {
	declare text="Certificat ssl pour ${domain} installé dans:
/etc/nginx/ssl/${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="Mise à jour de la base de données..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="Désactivation des trackers publics..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="Activation des trackers publics..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="Le répertoire requis n'existe pas..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="Impossible de se déplacer vers $1..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="Impossible d'installer un paquet nécessaire $1..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="Status: OK. FlareSolverr est prêt!
${software_title} installé sur le port: ${software_web_port}"
		quickbox::dashboard::log "${text}."
	else
		declare text="On dirait que quelque chose a mal tourné."
		quickbox::dashboard::log "${text}."
	fi
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="accédez à ${software_title} à l'adresse:
https://${overseerr_web_root}/"
	else
		# trunk-ignore(shellcheck/SC2001)
		quickbox_web_root=$(echo "${quickbox_web_root}" | sed 's:/*$::')
		declare text="accédez à ${software_title} à l'adresse:
${quickbox_web_root}:${software_web_port}/
${software_title} installé sur le port: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="Réclamer un serveur Plex pour ${username}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="accédez à ${software_title} à l'adresse:
${quickbox_web_root}web/
${software_title} installé sur le port: ${software_web_port}

> Si vous ne l'avez pas fait et/ou si vous ne savez
réclamer votre serveur Plex veuillez suivre ce guide:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="Veuillez entrer vos informations d'identification Plex (nom d'utilisateur/mot de passe/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="Ces informations d'identification ne seront pas enregistrées ou partagées en dehors de cette instance."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="Email: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="Mot de passe: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [Laissez vide si aucun 2FA n'est défini] "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="Un nom d'utilisateur et un mot de passe sont nécessaires pour télécharger la mise à jour de Plex Pass.."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declare text="Nom d'utilisateur et/ou mot de passe incorrects."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="Impossible de se connecter, informations de débogage:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="Impossible de récupérer l'URL de téléchargement."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="Impossible d'analyser la réponse HTML."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="Téléchargement de la mise à jour de Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="Le téléchargement a échoué avec le code d'erreur ${code}, ${error}."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="Installation de la nouvelle version de Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="Plex a été mis à jour avec succès."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex est déjà à jour."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="accéder à ${software_title} à :
${quickbox_web_root}${username}/${software_name}/
${titre_logiciel} installé sur le port : ${software_web_port}

> Nom d'utilisateur = ${username}
> Mot de passe = pyload

> Connectez-vous à pyLoad et changez le mot de passe par défaut pour plus de sécurité.
Votre mot de passe peut être modifié dans l'onglet [Utilisateurs] de pyLoad."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} installé sur le port : ${software_daemon_port}

> Veuillez installer Quassel-Client sur votre ordinateur personnel et 
connectez-vous au nouveau ${software_title}. Core 
pour configurer votre compte sur :
${server_ip}:${software_daemon_port}

> Téléchargez Quassel-Client à partir de l'adresse suivante :
https://quassel-irc.org/downloads."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
Veuillez visiter https://console.developers.google.com et créer un projet.
Vous devrez noter votre client_id et votre client_secret.
Vous pouvez également consulter l'article de notre Knowledge Base ci-dessous pour une présentation détaillée :
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

Une fois que vous avez votre numéro de client et votre secret de client, appuyez sur n'importe quelle touche pour continuer.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="Entrez vos détails de connexion ci-dessous."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="ID du client: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="Secret du client: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="Mot de passe de cryptage: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="Sel cryptographique du mot de passe: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="Le mot de passe du sel cryptograpique ne peut pas être le même que celui du cryptage.."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="Veuillez confirmer les détails suivants avant de continuer..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="Client ID: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="Secret du client: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="Mot de passe de cryptage: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="Sel cryptographique: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="Si vous êtes satisfait des paramètres ci-dessus, appuyez sur Y pour continuer..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone::access() {
	declare text="${software_title} installé.
	
> Veuillez exécuter la commande suivante pour finaliser l'installation:
runuser -l ${username} -c \"rclone config reconnect gdrive:\"

> Pour plus d'informations sur l'installation de rclone, visitez:
https://quickbox.io/knowledge-base/applications/rclone/how-to-install-rclone/
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} Serveur installé.

> Veuillez installer x2go-client sur votre ordinateur personnel
et connectez-vous au serveur ${software_title} nouvellement créé
en utilisant les détails suivants :
Hôte:				${server_ip}
Connexion:			${username}
Port SSH:			4747
Type de session:	XFCE ou MATE

> Téléchargez x2go-client à l'adresse :
https://wiki.x2go.org/doku.php/doc:installation:x2goclient."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="La configuration de ZNC va maintenant s'exécuter. Veuillez répondre aux questions suivantes:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="Vérification avec le serveur ntp..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="Exécution des mises à jour apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="Vérification des dépendances initiales..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="Téléchargement de la mise à jour v3..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="Vérification des dépendances de QuickBox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="Installation des dépendances de base: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="Installation des dépendances Web: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="Installation des dépendances python: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="Enregistrement des dépendances installées..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="Mise à jour des modules pip..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="Mise à jour de lshell..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="Mise à jour du module Iris..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="Mise à jour des bibliothèques QuickBox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="Mise à jour des tâches cron..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="Mise à jour des configurations sudo..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="Mise à jour de curl..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="Vérification de php..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="Configuration des commandes QuickBox Pro..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="Mise à jour du tableau de bord QuickBox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="Mise à jour de la base de données QuickBox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="Mise à jour de la saisie semi-automatique..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="Configuration des autorisations..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="Nettoyage des fichiers de mise à jour..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="Mise à jour terminée!"
	quickbox::dashboard::log "${text}"
}
