#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_de
# File Description: German language file
# File Version: 1.0.76
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2022, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="speicher-cache bereinigen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="rclone upload-protokoll reinigen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="fehler: protokolldatei nicht vorhanden."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="erwarte systemantwort..."
	quickbox::dashboard::log "${text}"
}
################################################################################
# Locks
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} wird gerade ausgeführt
prozess wird fortgesetzt, sobald ${quickbox_lock} beendet ist"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="software-sperren entfernen..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="überprüfung und durchführung von apt updates..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="versuche, dpkg-sperre aufzulösen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get upgrade erfolgreich abgeschlossen"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="apt-get check ist fehlgeschlagen, sie haben möglicherweise defekte pakete"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Install
################################################################################
quickbox::lang::install::header() {
	declare text="${software_title} wird jetzt installiert
dieser vorgang kann ein paar minuten dauern..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="es sieht so aus, als ob rTorrent nicht installiert ist

rTorrent 0.9.8 wird jetzt installiert, bitte warten sie, da dies
ein paar minuten dauern kann (abhängig von den systemspezifikationen)"
		sonst
		declare text="${software_title} wird jetzt installiert
dieser vorgang kann ein paar minuten dauern..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="hinzufügen zusätzlicher schlüssel und quellen für ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="installiere ${software_title} abhängigkeiten..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="aufbau von ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="aufbau von mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="aufbau von xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="aufbau von libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="aufbau von rtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="${software_title} konfigurieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="sicherung der ${software_title} konfiguration..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="starten von ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="${software_title} installation abgeschlossen"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="${software_title} wird jetzt neu installiert
dieser vorgang kann einige minuten dauern..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} neuinstallation abgeschlossen"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} wird jetzt entfernt
dieser vorgang kann ein paar minuten dauern..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="anhalten von ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="entfernen von ${software_title} abhängigkeiten..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="entfernen von ${software_title} dateien..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="${software_title} entfernung abgeschlossen"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="${software_title} wird jetzt aktualisiert
dieser vorgang kann ein paar minuten dauern..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="aktualisierung von ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="${software_title} update abgeschlossen"
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="quickbox benutzer erstellt:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"quickbox benutzer"} gelöscht"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="benutzer: ${username}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::benutzer::passwort() {
	declare text="passwort: ${password}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="${username:-"quickbox benutzer"}'s passwort aktualisiert"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"quickbox benutzer"} gesperrt"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"quickbox benutzer"} unbanned"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"quickbox benutzer"} degradiert von admin"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"quickbox benutzer"} befördert zu admin"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::username::specified() {
	declare text="fehler: benutzername nicht angegeben"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::example() {
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u benutzer ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d etwasdomäne.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u benutzer -d etwasdomäne.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.emby.domäne ${option[*]}"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.jellyfin.domäne ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.komga.domäne ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.overseerr.domäne ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.plex.domäne ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u benutzer ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d etwasdomäne.com ${option[*]}"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u benutzer -d etwasdomäne.com ${option[*]}"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.emby.domäne ${option[*]}"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.jellyfin.domäne ${option[*]}"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.komga.domäne ${option[*]}"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.overseerr.domäne ${option[*]}"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} -d etwas.plex.domäne ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u benutzer ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d etwasdomäne.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u benutzer ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d etwasdomäne.com ${option[*]}"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::note() {
	[[ ${software_name} == "bazarr" && ${is4k} == 1 ]] && declare software_name="bazarr4k"
	[[ ${software_name} == "radarr" && ${is4k} == 1 ]] && declare software_name="radarr4k"
	[[ ${software_name} == "sonarr" && ${is4k} == 1 ]] && declare software_name="sonarr4k"
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="installiert neueste ${branch}-version von ${software_name} für benutzer"
		[[ -n ${dmn} ]] && declare text="installiert ein ssl-zertifikat, das für das dashboard auf der angegebenen domäne verwendet werden soll"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="installiert die neueste ${branch}-version von ${software_name} für benutzer und stellt ssl-zertifikat für domäne bereit"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="installiert ein ssl-zertifikat für die angegebene domäne"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene emby-domäne"
		[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene jellyfin-domäne"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene komga-domäne"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene overseerr-domäne"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene plex-domäne"
		[[ -n ${version} ]] && declare text="installiert neueste ${version[*]}-version von ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="installiert neueste ${branch}-version von ${software_name}"
		[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="installiert die neueste ${branch}-version von ${software_name} mit zugeordnetem datenverzeichnis"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="installiert neuste ${branch}-version von ${software_name} für benutzer"
		[[ -n ${dmn} ]] && declare text="installiert das für das dashboard verwendete ssl-zertifikat auf der angegebenen domäne neu"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="neueste ${branch}-version von ${software_name} für benutzer installieren und ssl-zertifikat für domäne bereitstellen"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="installiert ein ssl-zertifikat für die angegebene domäne neu"
		[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene emby-domäne neu"
		[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene jellyfin-domäne neu"
		[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene komga-domäne neu"
		[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene overseerr-domäne neu"
		[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="installiert ein ssl-zertifikat für die angegebene plex-domäne neu"
		[[ -n ${version} ]] && declare text="installiert neuste ${version[*]} version von ${software_name}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="neueste ${branch}-version von ${software_name} installieren"
		[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="installiert neuste ${branch} Version von ${software_name} mit zugeordnetem datenverzeichnis"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="entfernt ${software_name} für benutzer"
		[[ -n ${dmn} && -z ${usr} && -z ${version} ]] && declare text="entfernt das ssl-zertifikat aus der angegebenen domäne"
		[[ -n ${version} && -z ${dmn} ]] && declare text="entfernt ${software_name}"
		[[ -z ${usr} && -z ${version} && -z ${dmn} ]] && declare text="entfernt ${software_name}"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="aktualisiert ${software_name} auf die neueste version von ${branch} für benutzer"
		[[ -n ${dmn} ]] && declare text="aktualisiert das ssl-zertifikat für die angegebene domäne, das mit dem dashboard verwendet werden soll"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="aktualisiert das ssl-zertifikat für die angegebene domäne"
		[[ -n ${version} ]] && declare text="aktualisiert ${software_name} auf die neueste version von ${version}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="installiert neueste ${branch}-version von ${software_name}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}${software_name}
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}${username}/${software_name}
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::airsonic::access() {
	declare text="access ${software_title} unter:
${quickbox_web_root}${username}/${software_name}
benutzername: admin
passwort: admin
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}${username}/${software_name}
benutzername: ${username}
kennwort: admin123
datenbank speicherort: /home/${username}/.config/calibre/library
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> version av rTorrent: ${rtorrent_version}
> version av libtorrent: ${libtorrent_version}
> socket pfad: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="zugriff auf ${software_title} bei:
${quickbox_web_root}${software_name}
> socket pfad: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}${admin_name}/${software_name}
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard() {
	declare text="domäne: https://${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::dashboard::custom() {
	declare text="ssl zertifikat für ${domain} installiert in:
/etc/nginx/ssl/${domain}/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="datenbank aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="öffentliche tracker deaktivieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="öffentliche tracker aktivieren..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="das erforderliche verzeichnis existiert nicht..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="kann nicht nach $1 verschieben..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="konnte ein erforderliches paket $1 nicht installieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="status: ok. FlareSolverr ist bereit!
${software_title} installiert auf port: ${software_web_port}"
		quickbox::dashboard::log "${text}"
	else
		declare text="Sieht aus, als wäre etwas schief gelaufen"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::jellyfin::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyfin_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="access ${software_title} unter:
https://${jellyfin_web_root}/"
	else
		declare text="access ${software_title} unter:
${quickbox_web_root}${username}/${software_name}/
${software_title} installiert auf Port: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::notifiarr::access() {
	if [[ ${#notifiarr_user_password} -lt 9 ]]; then
		declare text="access ${software_title} unter:
${quickbox_web_root}${username}/${software_name}
${software_title} installiert auf Port: ${software_web_port}
benutzername: ${username}
passwort: ${notifiarr_user_password}

Hinweis: Ihr passwort hat weniger als 9 zeichen.
         Notifiarr erfordert passwörter mit mindestens 9 zeichen.
         Ich habe dies geändert, um zusätzliche zufällige zeichen hinzuzufügen.
         Sie können sich mit dem angegebenen passwort anmelden und es in den einstellungen ändern.
         ----------------------------------------------------------
         Der einfachheit halber befindet sich das neue passwort in:
         /home/${username}/.config/Notifiarr/config/.notifiarr.pass.txt"
		quickbox::dashboard::log "${text}"
	else
		declare text="access ${software_title} unter:
${quickbox_web_root}${username}/${software_name}
${software_title} installiert auf Port: ${software_web_port}
benutzername: ${username}
passwort: ${notifiarr_user_password}"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::novnc::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}vnc/vnc.html?resize=remote&path=${username}/websockify
${software_title} installiert auf port: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="zugriff auf ${software_title} unter:
https://${overseerr_web_root}/"
	else
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="zugriff auf ${software_title} unter:
http://${server_ip}:${software_web_port}/
${software_title} installiert auf port: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex_directory_warning() {
	declare text="das benutzerdefinierte Datenverzeichnis: '${software_install_directory}' existiert bereits.
verwenden sie stattdessen '${software_install_directory}/plex'."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="beanspruchung des plex server für ${username}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="zugriff auf ${software_title} unter:
${quickbox_web_root}web/
${software_title} auf port installiert: ${software_web_port}

> wenn sie das noch nicht getan haben oder unsicher sind, wie sie 
ihren plex server beanspruchen, folgen sie bitte dieser anleitung:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="Bitte geben Sie Ihre Plex-Anmeldedaten ein (Benutzername/Passwort/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="Diese Anmeldedaten werden nicht gespeichert oder außerhalb dieser Instanz weitergegeben."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="E-Mail: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="Passwort: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [Leer lassen, wenn keine 2FA eingestellt ist] "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="Benutzername und Passwort werden für das Herunterladen des PlexPass Updates benötigt."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declare text="Benutzername und/oder Passwort falsch"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="Anmeldung fehlgeschlagen, Debug-Informationen:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="Die Download-URL konnte nicht abgerufen werden."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="Die HTML-Antwort konnte nicht geparst werden."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="Plex-Update wird heruntergeladen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="Download fehlgeschlagen mit Fehlercode ${code}, ${error}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="Installiere neue Plex-Version..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="Plex wurde erfolgreich aktualisiert."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex ist bereits auf dem neuesten Stand."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="Zugriff auf ${software_title} unter:
${quickbox_web_root}${username}/${software_name}/
${software_title} installiert auf Port: ${software_web_port}

> benutzername = ${username}
> Kennwort = pyload

> Melden Sie sich bei pyload an und ändern Sie das Standardpasswort zur Sicherheit.
Ihr Passwort können Sie unter der Registerkarte [benutzer] in pyload ändern."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} installiert auf Port: ${software_daemon_port}
  
> Bitte installieren Sie quassel-client auf Ihrem persönlichen 
Computer und verbinden Sie sich mit dem neu erstellten ${software_title} Kern 
um Ihr Konto einzurichten unter:
${server_ip}:${software_daemon_port}

> Laden Sie den quassel-client von folgendem Link herunter:
https://quassel-irc.org/downloads"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
Bitte besuchen Sie https://console.developers.google.com und legen Sie ein Projekt an.
Sie müssen sich Ihre client_id und client_secret notieren.
Sie können auch den folgenden Knowledge Base-Artikel besuchen, um einen Überblick zu erhalten:
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

Sobald Sie sowohl Ihre client_id als auch client_secret haben, drücken Sie eine beliebige Taste, um fortzufahren.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="Geben Sie Ihre Verbindungsdaten unten ein."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="Client ID: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="Kundengeheimnis: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="Verschlüsselungspasswort: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="Salt Passwort: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="Das Salt-Passwort kann nicht mit dem Verschlüsselungspasswort identisch sein."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="Bitte bestätigen Sie die folgenden Angaben, bevor Sie fortfahren..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="Kunden-ID: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="Kundengeheimnis: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="Verschlüsselungspasswort: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="Salt Passwort: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="Wenn Sie mit den obigen Einstellungen zufrieden sind, drücken Sie Y, um fortzufahren..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone::access() {
	declare text="${software_title} installiert
  
> Bitte führen Sie den folgenden Befehl aus, um die Einrichtung abzuschließen:
runuser -l ${username} -c \"rclone config reconnect gdrive:\"

> Weitere Informationen zur Installation von rclone finden Sie unter:
https://quickbox.io/knowledge-base/applications/rclone/how-to-install-rclone/
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::sonarrv4::update::error() {
	declare text
	text="$(tput setaf 7)Sonarr v4 $(tput setaf 1)kann $(tput setaf 7) nicht von v3 aktualisiert werden.
Bitte deinstallieren Sie v3 und installieren Sie v4.$(tput sgr0)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::vpnzip::access() {
	declare text="download ${software_title} profil unter:
${quickbox_web_root}${username}/ovpn.zip
> in jedem OpenVPN-Client zu verwenden"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} Server installiert
  
> Bitte installieren Sie den x2go-Client auf Ihrem PC
und verbinden Sie sich mit dem neu erstellten ${software_title} Server
mit folgendem:
Host:			${server_ip}
Anmeldung:		${username}
SSH-Port:		4747
Sitzungstyp:	XFCE oder MATE

> x2go-client von folgenden Seiten herunterladen:
https://wiki.x2go.org/doku.php/doc:installation:x2goclient"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="Die ZNC-Konfiguration wird jetzt ausgeführt. Bitte beantworten Sie die folgenden Fragen:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="überprüfung mit ntp-server..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="ausführen von apt-updates ..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="überprüfung auf anfängliche abhängigkeiten ..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="v3-Update wird heruntergeladen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="überprüfung auf quickbox-abhängigkeiten..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="installieren von basisabhängigkeiten: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="installation von web-abhängigkeiten: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="installieren von python-abhängigkeiten: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="speichern installierter abhängigkeiten..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="pip aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="lshell aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="iris aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="aktualisierung der quickbox-bibliotheken..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="cronjobs aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="aktualisieren von sudo-konfigurationen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="curl aktualisieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="php prüfen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="konfigurieren von quickbox pro-befehlen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="aktualisierung des quickbox-dashboards..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="aktualisierung der quickbox-datenbank..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="aktualisierung der quickbox-autovervollständigung..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="berechtigungen konfigurieren..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="aktualisierungsdateien bereinigen..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="aktualisierung abgeschlossen!"
	quickbox::dashboard::log "${text}"
}
