#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_pt
# File Description: Portuguese (Brazil) language file
# File Version: 1.0.151
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2025, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="memória de limpeza cache..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="registro de upload do rclone de limpeza..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="erro: arquivo de log não presente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="aguardando resposta do sistema"
	quickbox::dashboard::log "${text}"
}
################################################################################
# Locks
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} está correndo atualmente
o processo será retomado quando ${quickbox_lock} terminar"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="removendo fechaduras de software..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="verificação e execução de atualizações apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="tentando resolver a fechadura dpkg..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get upgrade concluído com sucesso"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="apt-get check falhou, você pode ter quebrado pacotes"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Install
################################################################################
quickbox::lang::install::header() {
	declare text="${software_title} será agora instalado
este processo pode levar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="parece que o rTorrent não está instalado

rTorrent 0.9.8 será agora instalado, por favor aguarde
demorar alguns minutos (dependendo das especificações do sistema) para instalar"
	else
		declare text="${software_title} será agora instalado
este processo pode levar alguns minutos..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="adicionando chaves e fontes adicionais por ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="instalando ${software_title} dependências..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="construindo ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="construindo mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="construindo xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="construindo libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="construindo rtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::certificate::header() {
	declare text="criando certificado SSL para ${d}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::lecert::header() {
	declare text="configurando NGinx para Let's Encrypt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="configurando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="backup de ${software_title} configuração..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="começando em ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="${software_title} instalação completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="${software_title} será reinstalado agora
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} reinstalação completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} será agora removido
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="parando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="removendo ${software_title} dependências..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="removendo ${software_title} arquivos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="${software_title} remoção completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="${software_title} será agora atualizado
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="atualizando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="${software_title} atualização completa"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::admin() {
	declare text="deve estar logado como administrador para atualizar ${software_title}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::jellyfin::ffmpeg() {
	declare text="atualizando ffmpeg para Jellyfin..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Renew - Let's Encrypt
################################################################################
quickbox::lang::install::lecert::complete() {
	declare -a domain_array
	if [[ -n "${dash}" ]]; then
		domain_array+=("https://${domain_options[dash]}")
		application_array+=("QuickBox")
	fi
	if [[ -n "${emby}" ]]; then
		domain_array+=("https://${domain_options[emby]}")
		application_array+=("Emby")
	fi
	if [[ -n "${jellyfin}" ]]; then
		domain_array+=("https://${domain_options[jellyfin]}")
		application_array+=("Jellyfin")
	fi
	if [[ -n "${jellyseerr}" ]]; then
		domain_array+=("https://${domain_options[jellyseerr]}")
		application_array+=("Jellyseerr")
	fi
	if [[ -n "${komga}" ]]; then
		domain_array+=("https://${domain_options[komga]}")
		application_array+=("Komga")
	fi
	if [[ -n "${overseerr}" ]]; then
		domain_array+=("https://${domain_options[overseerr]}")
		application_array+=("Overseerr")
	fi
	if [[ -n "${plex}" ]]; then
		domain_array+=("https://${domain_options[plex]}")
		application_array+=("Plex")
	fi
	if [[ -n "${no_dash}" ]]; then
		domain_array+=("${domain}")
		application_array+=("o domínio personalizado foi")
	fi
	for ((i = 0; i < ${#domain_array[@]}; i++)); do
		declare text="certificado SSL para ${application_array[i]} instalado.
domínio: ${domain_array[i]}"
	done
	quickbox::dashboard::log "${text}"
}

quickbox::lang::renew::certificates::header() {
	declare text="o processo de renovação do certificado SSL começará agora"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::renew::complete::header() {
	declare text="renovação do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lecert::renew() {
	# divide domain entries with commas and set final entry to "and"
	for ((i = 0; i < ${#domain[@]}; i++)); do
		if [[ ${i} -eq 0 ]]; then
			declare text="${domain[i]}"
		elif [[ ${i} -eq $((${#domain[@]} - 1)) ]]; then
			declare text="${text} e ${domain[i]}"
		else
			declare text="${text}, ${domain[i]}"
		fi
	done
	declare text="renovando certificado SSL para ${text}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lecert::renew::info() {
	created_array="${certificate_created}"
	expires_array="${certificate_expiry}"
	days_left_array="${certificate_days_left}"
	# create certificate info header for completion message
	declare text_header="
Informações do certificado:
"
	declare text="domínio: ${d}
criado: ${created_array[*]}
expira: ${expires_array[*]}
dias restantes:: ${days_left_array[*]}
"
	# show text_header only once for multiple domains
	if [[ ${d} == "${domain[0]}" ]]; then
		quickbox::dashboard::log "${text_header}
${text}"
	else
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::reinstall::lecert::complete::header() {
	declare text="reinstalação do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::cert::complete::header() {
	declare text="remoção do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="criado pelo usuário do quickbox:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"usuário da quickbox"} apagado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="usuário: ${username}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password() {
	declare text="senha: ${password}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="senha do ${username:-"usuário da quickbox"} atualizada"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"usuário da quickbox"} banido"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"usuário da quickbox"} não-distribuído"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"usuário da quickbox"} despromovido de admin"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"usuário da quickbox"} promovido à admin"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::unknown::option() {
	declare text="${2} Opção desconhecida: ${1}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::username::specified() {
	declare text="erro: nome de usuário não especificado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::airsonic::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
nome de usuário: admin
senha: admin
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::autodl::access() {
	adl_port=$(cat <"/home/${admin_name:-}/.autodl/autodl.cfg" | grep "gui-server-port = " | sed 's/gui-server-port = //')
	declare text="acesso ${software_title} em:
${quickbox_web_root}rutorrent
  > menu > autodl-irssi
${software_title} instalado na porta: ${adl_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
nome de usuário: ${username}
senha: admin123
localização do banco de dados: ${software_library_directory}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::jdownloader::access() {
	declare text="acesso ${software_title} em:
https://my.jdownloader.org/
local de download: ${software_downloads_directory}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> versão rTorrent: ${rtorrent_version}
> versão libtorrent: ${libtorrent_version}
> caminho do soquete: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${software_name}
> caminho do soquete: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${admin_name}/${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="atualizando o banco de dados..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="desativando rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="possibilitando rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="diretório necessário não existe..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="incapaz de passar para $1..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="não pôde instalar um pacote necessário $1..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="status: ok. FlareSolverr está pronto!
${software_title} instalado na porta: ${software_web_port}"
		quickbox::dashboard::log "${text}"
	else
		declare text="Parece que algo deu errado"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::jellyfin::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyfin_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesse ${software_title} em:
https://${jellyfin_web_root}/"
	else
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::notifiarr::access() {
	if [[ ${#notifiarr_user_password} -lt 9 ]]; then
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}
nome de usuário: ${username}
senha: ${notifiarr_user_password}

Nota: Sua senha tem menos de 9 caracteres.
      O Notifiarr exige que as senhas tenham pelo menos 9 caracteres.
      Eu modifiquei isso para adicionar caracteres aleatórios adicionais.
      Você pode fazer login usando a senha fornecida e alterá-la nas configurações.
      -------------------------------------------------------
      Para sua conveniência, a nova senha está localizada em:
      /home/${username}/.config/Notifiarr/config/.notifiarr.pass.txt"
		quickbox::dashboard::log "${text}"
	else
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}
nome de usuário: ${username}
senha: ${notifiarr_user_password}"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::novnc::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/vnc/vnc.html?resize=remote&host=${novnc_web_root}&path=${username}/websockify
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::jellyseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesso ${software_title} em:
https://${jellyseerr_web_root}/"
	else
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="acesso ${software_title} em:
http://${server_ip}:${software_web_port}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesso ${software_title} em:
https://${overseerr_web_root}/"
	else
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="acesso ${software_title} em:
http://${server_ip}:${software_web_port}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex_directory_warning() {
	declare text="o diretório de dados customizado: '${software_install_directory}' já existe.
usando '${software_install_directory}/plex' em vez disso."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="reivindicando servidor plex para ${username}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}web/
${software_title} instalado na porta: ${software_web_port}

> se ainda não o fez, ou se não tem a certeza de como 
reclamar o seu servidor plex por favor siga este guia:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="Por favor, digite suas credenciais Plex (Nome de usuário/Senha/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="Estas credenciais não serão salvas ou compartilhadas fora desta instância."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="Email: "
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="Senha: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [Deixar em branco se não houver conjunto 2FA] "
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="O nome de usuário e a senha são necessários para fazer o download da atualização do PlexPass."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declarar text="Nome de usuário e/ou senha incorretos"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="Falha no login, depuração de informações:"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="Incapaz de recuperar a URL de download."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="Falha na análise da resposta HTML."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="Fazendo o download da atualização do Plex..."
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="O download falhou com código de erro ${code}, ${error}"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="Instalando a nova versão do Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="O Plex foi atualizado com sucesso."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex já está em dia."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}/
${software_title} instalado na porta: ${software_web_port}

> nome de usuário = ${username}
> senha = pyload

> Login para fazer o pyload e alterar a senha padrão de segurança.
Sua senha pode ser alterada sob a guia [usuários] em pyload."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::build::python311() {
	declare text="instalando o python 3.11, aguarde, pois isso pode demorar um pouco ..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} instalado na porta: ${software_daemon_port}
  
> Por favor, instale o quassel-cliente em seu cliente pessoal 
computador e conecte-se ao recém-criado ${software_title} Núcleo 
para configurar sua conta em:
${server_ip}:${software_daemon_port}

> Baixar quassel-cliente a partir do seguinte:
https://quassel-irc.org/downloads"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
Por favor, visite https://console.developers.google.com e crie um projeto.
Você precisará tomar nota de seu client_id e client_secret.
Você também pode visitar o artigo abaixo da Base de Conhecimento para uma caminhada:
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

Uma vez que você tenha tanto seu client_id quanto client_secret, pressione qualquer tecla para continuar.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="Digite abaixo os detalhes de sua conexão."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="Identificação do cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="Segredo do cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="Senha de encriptação: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="Senha de sal: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="A senha de sal não pode ser a mesma que a senha de criptografia."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="Favor confirmar os seguintes detalhes antes de continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="Identificação do cliente: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="Segredo do cliente: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="Senha de encriptação: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="Senha de sal: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="Se estiver satisfeito com os ajustes acima, pressione Y para continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone::access() {
	declare text="${software_title} instalado

> Para mais informações sobre como instalar o rclone, veja:
  qb help rclone
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::build::sabnzbd::par2cmdline() {
	declare text="instalando par2cmdline, aguarde, pois isso pode demorar um pouco..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::sonarrv4::update::error() {
	declare text
	text="$(tput setaf 7)Sonarr v4 $(tput setaf 1)não pode$(tput setaf 7) ser atualizado de v3.
Desinstale a v3 e instale a v4.$(tput sgr0)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::vpnzip::access() {
	declare text="baixar o perfil ${software_title} em:
${quickbox_web_root}${username}/ovpn.zip
> para usar em qualquer cliente OpenVPN"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::client_config() {
	declare text="definindo a configuração do cliente para $1"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::server_config() {
	declare text="definindo a configuração do servidor para $1"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::configure::client_ask() {
	declare text="Deseja inserir uma configuração de cliente? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::configure::client_paste() {
	declare text="Cole ou insira a configuração do cliente abaixo. Pressione ctrl+D ou ⌘+D quando terminar para continuar."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::configure::client_ask_extra() {
	declare text="Deseja inserir outra configuração de cliente? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::wireguard::configure::client_ask_extra_error() {
	declare text="Entrada inválida. Por favor insira 's' ou 'n'."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::wsdashboard::access() {
	declare text="access ${software_title} at:
${quickbox_web_root}whats-streaming.php"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} Servidor instalado

> Instale o x2go-client em seu computador pessoal
e conecte-se ao servidor ${software_title} recém-criado
usando o seguinte:
Anfitrião:			${server_ip}
Login:				${username}
Porta SSH:			4747
Tipo de sessão:		XFCE ou MATE

> Faça o download do x2go-client a partir do seguinte:
https://wiki.x2go.org/doku.php/doc:installation:x2goclient"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="A configuração ZNC será executada agora. Por favor, responda as seguintes perguntas:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="verificando com o servidor ntp..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="executando atualizações do apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="verificando as dependências iniciais..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="baixando atualização v3..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="verificando as dependências do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="instalando dependências de base: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="instalando dependências da web: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="instalando dependências python: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="salvando dependências instaladas..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="atualizando pip..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="atualizando lshell..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="atualizando íris..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="atualizando bibliotecas quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="atualizando cron jobs..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="atualizando as configurações do sudo..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="atualizando curl..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="verificando php..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="configurando comandos do quickbox pro..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="atualizando o painel do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="atualizando banco de dados quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::services() {
	declare text="verificando e atualizando arquivos de serviço de software instalados..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="atualizando o preenchimento automático do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::manpage() {
	declare text="atualizando a página de manual do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="configurando permissões..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="limpando arquivos de atualização..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="atualização concluída!"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Manager - /opt/quickbox/system/manage :: `-s` | case: software)
################################################################################

### `-o backup` | case: backup)

quickbox::lang::backup::configf() {
	declare text="o arquivo de configuração para ${software_name} agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::error() {
	declare text="arquivo de configuração ${softwareConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::success() {
	declare text="foi feito backup do arquivo de configuração."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::error() {
	declare text="${software_title} diretório de instalação não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir() {
	declare text="o diretório de instalação para ${software_title} (${backup_version}) agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configdir() {
	declare text="o diretório de configuração para ${software_title} agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::success() {
	backup_version="$(tput setaf 5)${backup_version}$(tput setaf 2)"
	declare text="${software_title} (${backup_version}) foi copiado."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o restore` | case: restore)

quickbox::lang::restore::configf::error() {
	declare text="arquivo de backup ${backupConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::restore::configf::success() {
	declare text="o arquivo de backup foi restaurado."
	quickbox::dashboard::log "${text}"
}

### `-o default` | case: default)

quickbox::lang::default::configf::error() {
	declare text="o arquivo de configuração padrão ${defaultConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::default::configf::success() {
	declare text="o arquivo de configuração padrão foi restaurado."
	quickbox::dashboard::log "${text}"
}

### `-o rollback` | case: rollback)

quickbox::lang::rollback::installdir::error() {
	declare text="${software_title} diretório de instalação não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::version() {
	declare texto="versão:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::date() {
	declare text="data:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection() {
	declare text="selecione um número na lista abaixo para reverter
para uma versão anterior de ${software_title}:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::invalid() {
	declare text="seleção inválida. por favor, tente novamente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::software::error() {
	declare text="${software_title} o backup do aplicativo não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::config::error() {
	declare text="${software_title} backup de configuração não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="você selecionou a versão ${version} para ${software_title}.
pacote de aplicativos: ${app_package}
pacote de configuração: ${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::selection::confirm() {
	declare text="tem certeza que deseja prosseguir com a reversão? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::cancelled() {
	declare text="reversão cancelada."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} agora está sendo revertido para a versão ${version}."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} (${version}) foi revertido."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o delete` | case: delete)

quickbox::lang::delete::selection::version() {
	declare texto="versão:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::date() {
	declare text="data:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection() {
	declare text="selecione um número da lista abaixo para deletar
um backup anterior de ${software_title}:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::invalid() {
	declare text="seleção inválida. por favor, tente novamente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::software::error() {
	declare text="${software_title} backup de aplicativo não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::config::error() {
	declare text="${software_title} backup de configuração não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="você selecionou a versão ${version} para ${software_title}.
pacote de aplicativos: ${app_package}
pacote de configuração: ${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::selection::confirm() {
	declare text="tem certeza que deseja prosseguir com a exclusão? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::cancelled() {
	declare text="exclusão de backup cancelada."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} backup (${version}) agora está sendo excluído."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} backup (${version}) foi deletado."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o mysql` | case: db)

quickbox::lang::db::install::prompt() {
	declare text="MySQL não está instalado. Você gostaria de instalar? [y/N]:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::apt() {
	declare text="Atualizando APTO..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql_apt() {
	declare text="Baixando MySQL APT Config..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql_apt::fail() {
	declare text="Falha ao baixar a configuração do MySQL APT."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql_apt::install() {
	declare text="Instalando MySQL APT Config..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql_apt::install::fail() {
	declare text="Falha ao instalar o MySQL APT Config."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql() {
	declare text="Instalando MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::fail() {
	declare text="Falha ao instalar o MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::start::fail() {
	declare text="Falha ao iniciar o MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::enable::fail() {
	declare text="Falha ao ativar o MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::success() {
	declare text="MySQL foi instalado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::installed() {
	declare text="O MySQL já está instalado, continuando com a configuração."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::config() {
	declare text="Atualizando configuração do MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::config::backup() {
	declare text="O arquivo mysqld.cnf atual foi copiado para mysqld.cnf.backup."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::config::write() {
	declare text="Definindo a configuração do MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::config::write::fail() {
	declare text="Falha ao gravar a configuração do MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::privileges() {
	declare text="Configurando privilégios do MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::privileges::fail() {
	declare text="Falha ao gravar privilégios do MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::client() {
	declare text="Definindo a configuração do cliente MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::client::fail() {
	declare text="Falha ao gravar a configuração do cliente MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::reload() {
	declare text="Recarregando o daemon systemctl..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::reload::fail() {
	declare text="Falha ao recarregar o daemon systemctl."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::enable() {
	declare text="Habilitando MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::restart() {
	declare text="Reiniciando o MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::restart::fail() {
	declare text="Falha ao reiniciar o MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::user() {
	declare text="Criando usuário MySQL ${mysql_user}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::user::fail() {
	declare text="Falha ao criar usuário MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::grant() {
	declare text="Concedendo privilégios ao usuário MySQL ${mysql_user}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::grant::fail() {
	declare text="Falha ao conceder privilégios ao usuário MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::flush() {
	declare text="Liberando privilégios..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::flush::fail() {
	declare text="Falha ao liberar privilégios."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::convert() {
	declare text="Convertendo banco de dados para MySQL..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::convert::success() {
	declare text="O banco de dados foi convertido para MySQL."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::remove() {
	declare text="Gostaria de remover o banco de dados SQLite? [y/N]:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::remove::fail() {
	declare text="Falha ao desativar SQLite em PHP."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::complete() {
	declare text="MySQL foi configurado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::details() {
	declare text="Detalhes da conexão MySQL:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::connection::details() {
	declare text="Nome de usuário: ${mysql_user}
Senha: ${mysql_password}
Porta: ${mysql_port}
Hospedar: ${mysql_host}
Base de dados: ${mysql_name}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::mycnf() {
	declare text="Esses detalhes podem ser encontrados em /root/.my.cnf"
	quickbox::dashboard::log "${text}"
}

### `-o sqlite` | case: db)

quickbox::lang::db::install::sqlite::backup() {
	declare text="Fazendo backup do banco de dados SQLite..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::backup::success() {
	declare text="O banco de dados SQLite foi copiado para ${sqlite_file}.${date}.backup"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::convert() {
	declare text="Convertendo banco de dados para SQLite..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::convert::success() {
	declare text="O banco de dados foi convertido para SQLite."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::remove() {
	declare text="Você gostaria de remover o MySQL completamente? [y/N]:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::remove::mysql() {
	declare text="Gostaria de remover o banco de dados MySQL? [y/N]:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::php::fail() {
	declare text="Falha ao instalar SQLite em PHP."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::php::enable::fail() {
	declare text="Falha ao ativar SQLite em PHP."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::complete() {
	declare text="O processo de conversão do banco de dados SQLite foi concluído."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::invalid() {
	declare text="Opção inválida: ${option}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::sqlite::mysql::notfound() {
	declare text="Banco de dados MySQL não encontrado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::db::install::mysql::sqlite::notfound() {
	declare text="Banco de dados SQLite não encontrado."
	quickbox::dashboard::log "${text}"
}

### `-o backup` | case: backup)
quickbox::lang::db::backup::sqlite::integrity() {
	declare text="Verificando a integridade do banco de dados SQLite..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::sqlite::integrity::pass() {
	declare text="Verificação de integridade do banco de dados concluída com sucesso."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::sqlite::complete() {
	declare text="Backup concluído: ${full_backup_path}/qbpro.db"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::sqlite::integrity::fail() {
	declare text="Falha na verificação de integridade do banco de dados. Nenhum backup foi criado."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::repair() {
	declare text="Tentando reparar o banco de dados SQLite..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::sqlite::integrity::repair() {
	declare text="
    [AVISO] Reparação do banco de dados do QuickBox!

    O banco de dados do QuickBox falhou na verificação de integridade e uma tentativa de reparo foi realizada.

    Comando: REINDEX; VACUUM;

    Você pode encontrar os backups mais recentes em:
    /opt/quickbox/backup/system/[DATE]/db/qbpro.db

    Para remover esta mensagem, execute o seguinte comando:
    rm -f /etc/quickbox_motd
"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::repair::complete() {
	declare text="Reparo do banco de dados SQLite concluído."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::repair::fail() {
	declare text="Falha ao reparar o banco de dados SQLite."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::sqlite::integrity::restore() {
	declare text="
    [AVISO] Reparação do banco de dados do QuickBox!

    O banco de dados do QuickBox falhou na verificação de integridade e uma tentativa de reparo foi realizada.
    Um backup anterior válido foi restaurado e as permissões foram ajustadas.

    Você pode encontrar os backups mais recentes em:
    /opt/quickbox/backup/system/[DATE]/db/qbpro.db

    Para remover esta mensagem, execute o seguinte comando:
    rm -f /etc/quickbox_motd
"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::restore::complete() {
	declare text="Restauração do banco de dados SQLite concluída."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::mysql() {
	declare text="Fazendo backup do banco de dados MySQL..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::mysql::complete() {
	declare text="Backup do MySQL concluído: ${full_backup_path}/qbpro.sql"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::mysql::fail() {
	declare text="Falha no backup do MySQL."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::backup::unsupported() {
	declare text="Tipo de banco de dados não suportado: ${db_type}. Nenhum backup foi criado."
	quickbox::dashboard::log "${text}"
}

### `-o maintenance` | case: maintenance)
quickbox::lang::db::maintenance::sqlite() {
	declare text="Realizando manutenção no banco de dados SQLite..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::backup() {
	declare text="Fazendo backup do banco de dados antes da manutenção..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::optimize() {
	declare text="Otimizando o banco de dados SQLite (VACUUM)..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::optimize::complete() {
	declare text="Otimização do banco de dados SQLite concluída."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::optimize::fail() {
	declare text="Falha na otimização do banco de dados SQLite."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::sqlite::integrity::fail() {
	declare text="Falha na verificação de integridade do banco de dados. Nenhuma manutenção foi realizada."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql() {
	declare text="Realizando manutenção no banco de dados MySQL..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::backup() {
	declare text="Fazendo backup do banco de dados MySQL antes da manutenção..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::backup::fail() {
	declare text="Falha no backup do MySQL. Pulando a manutenção."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::optimize() {
	declare text="Otimizando as tabelas do banco de dados MySQL..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::optimize::complete() {
	declare text="Otimização do banco de dados MySQL concluída."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::optimize::fail() {
	declare text="Falha na otimização do banco de dados MySQL."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::integrity() {
	declare text="Verificando a integridade do banco de dados MySQL..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::integrity::pass() {
	declare text="Verificação de integridade do banco de dados MySQL concluída com sucesso."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::mysql::integrity::fail() {
	declare text="Falha na verificação de integridade do banco de dados MySQL."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::maintenance::unsupported() {
	declare text="Tipo de banco de dados não suportado: ${db_type}. Nenhuma manutenção foi realizada."
	quickbox::dashboard::log "${text}"
}

### `-o restore` | case: restore)
quickbox::lang::db::restore::backup::error() {
	declare text="Diretório de backup não encontrado: ${backup_root}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::backup::empty() {
	declare text="Nenhum backup encontrado no diretório de backup."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::backup::select() {
	declare text="Selecione um backup para restaurar:"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::backup::number() {
	declare text="Digite o número do backup para restaurar: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::backup::invalid() {
	declare text="Seleção inválida. Tente novamente."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::sqlite::success() {
	declare text="Banco de dados SQLite restaurado com sucesso de ${select_backup}."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::sqlite::fail() {
	declare text="Falha ao restaurar o banco de dados SQLite."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::mysql::success() {
	declare text="Banco de dados MySQL restaurado com sucesso de ${select_backup}."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::mysql::fail() {
	declare text="Falha ao restaurar o banco de dados MySQL."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::db::restore::unsupported() {
	declare text="Tipo de banco de dados não suportado: ${db_type}. Nenhuma restauração foi realizada."
	quickbox::painel::log "${text}"
}

### `wireguard` | case: wireguard)

quickbox::lang::wireguard::mtuendpoint::error() {
	declare text="Erro: --mtu e --endpoint são necessários para o processo 'calc'"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB HELP MENUS
################################################################################

### ERRORS

quickbox::error::non-empty() {
	declare text="Erro: $1 requer um argumento não vazio"
	quickbox::dashboard::log "${text}"
}

### MISC

quickbox::nvpn::conf::generator::usage() {
	declare text="
Gerador de configuração NordVPN WireGuard

Uso:
  nvpn_conf_gen -t 'token_privado' [-dns 'preferido_dns'] [-c 'nome_país'] [-L 'número_de_configs'] [-l] [-h]

Opções:
  -t   | --token    Token privado NordVPN
  -dns | --dns      DNS preferencial (padrão: 103.86.96.100)
  -c   | --country  Nome do país preferido (use --list para listar os países disponíveis)
  -L   | --limit    Limita o número de configurações a serem criadas (padrão: 5)
  -l   | --list     Lista os países disponíveis para conexões WireGuard
  -h   | --help     Exibe esta mensagem de ajuda

Exemplo:
  nvpn_conf_gen -t 'seu_token' -c 'Brazil' -L 10

Notas:
  - O token pode ser gerado a partir de:
    https://my.nordaccount.com/dashboard/nordvpn/manual-configuration/
  - Os arquivos de configuração serão salvos em '${wg_conf_storage_dir}'
"
	quickbox::dashboard::log "${text}"
}

quickbox::wireguard::manage::help() {
	declare text="
Gerenciamento do QuickBox WireGuard

Uso:
  qb manage wireguard [processo] [opções]

Processos:
  add                                 Adicionar uma configuração de cliente ou servidor
    -c    | --client                  Remover uma configuração de cliente WireGuard
    -s    | --server                  Remover a configuração do servidor WireGuard
    -cn   | --client-name             Definir o nome do cliente para a configuração do cliente WireGuard (necessário para a configuração do cliente '-c')
    -noc  | --number-of-clients       Definir o número de clientes para a configuração do servidor WireGuard (padrão: 1)
    -lp   | --listen-port             Definir a porta de escuta para a configuração do servidor WireGuard (padrão: 51820)
    -mtu  | --mtu                     Definir a MTU para a configuração do servidor WireGuard
    -cai  | --client-allowed-ips      Definir os IPs permitidos para a configuração do cliente WireGuard (padrão: 0.0.0.0/0, ::/0)
    -cidr | --cidr                    Define a notação CIDR para a configuração do servidor WireGuard (padrão: server - <server_ip>/24 | client - 10.5.0.2/16)
    -pur  | --post-up-rules           Define as regras post-up para a configuração do servidor WireGuard
    -pdr  | --post-down-rules         Define as regras post-down para a configuração do servidor WireGuard

  remove                              Remove uma configuração de cliente ou servidor
    -cn   | --client-name             Define o nome do cliente para a configuração do cliente WireGuard

  check                               Verifica as configurações do cliente WireGuard carregadas e em execução no momento
    -cn   | --client-name             Define o nome do cliente para a configuração do cliente WireGuard
    --deactivate                      Desativa a configuração do cliente WireGuard

  cron                                Adiciona um trabalho cron para verificar os arquivos de configuração do WireGuard

  calc                                Calcula a notação CIDR e MTU para a configuração do servidor
    --mtu                             Define o MTU para a configuração do servidor WireGuard
    --endpoint                        Define o ponto final para a configuração do servidor WireGuard
    --protocol                        Define o protocolo para a configuração do servidor WireGuard (ipv4 ou ipv6)

  help                                Exibe esta mensagem de ajuda

Exemplos:
  qb manage wireguard add -c -cn 'cliente_nome' -cai '0.0.0.0/0' -lp 51820
  qb manage wireguard add -s -noc 5 -lp 51820 -cidr '192.168.0.2/24' -pur 'iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE'
  qb manage wireguard remove -cn 'cliente_nome'
  qb manage wireguard check -cn 'cliente_nome' --deactivate
  qb manage wireguard cron
  qb manage wireguard calc --mtu 1420 --endpoint '192.168.0.0' --protocol 'ipv4'
"
	quickbox::dashboard::log "${text}"
}

### SOFTWARE (APPLICATIONS)

# Function to generate help text based on provided options
generate_help_text() {
	local software_title="$1"
	local software_name="$2"
	local has_update="$3"
	local options="$4"
	local examples="$5"
	local notes="$6"

	local processes="  install    Instalar ${software_title}
  reinstall  Reinstalar ${software_title}
  remove     Remover ${software_title}"

	if [[ ${has_update} == 1 ]]; then
		processes="${processes}
  update     Atualização ${software_title}"
	fi

	processes="${processes}
  help       Exibir esta mensagem de ajuda"

	declare text="
QuickBox Software Management para ${software_title}

Uso:
  qb [processo] ${software_name} [opções]

Processos:
${processes}

Opções:
${options}

Exemplos:
${examples}
${notes}
"
	quickbox::dashboard::log "${text}"
}

# Function to get help text for specific software
quickbox::software::help() {
	local software_help_name="$1"
	local software_title="${software_help_name^}" # Capitalize the first letter
	local has_update

	case "${software_help_name}" in
	emby | jellyfin)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Defina o nome de usuário para ${software_title} (obrigatório)
  -d | --domain    Defina o domínio para ${software_title}
  --beta           Instale a versão beta de ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com'    # Instale com domínio
  qb reinstall ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com'  # Reinstale com domínio
  qb install ${software_help_name} -u nome_de_usuário --beta                                   # Instale a versão beta
  qb reinstall ${software_help_name} -u nome_de_usuário --beta                                 # Reinstale a versão beta
  qb remove ${software_help_name} -u nome_de_usuário                                           # Remova
  qb update ${software_help_name} -u nome_de_usuário                                           # Atualizar

  ## Use várias opções
  qb install ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com' --beta
  qb reinstall ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com' --beta" \
			"
Observações:
  - Ao instalar ou reinstalar com a opção de domínio, o proxy reverso Nginx será configurado automaticamente.
      * Certifique-se de que o domínio esteja apontando para o endereço IP do servidor e que os registros DNS adequados estejam definidos."
		;;

	mylar3)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u   | --username             Define o nome de usuário para ${software_title} (obrigatório)
  -clp | --comic-location-path  Define o caminho do local para quadrinhos (padrão: /home/nome_de_usuário/Media/Comics)" \
			"  qb install ${software_help_name} -u nome_de_usuário -clp '/caminho/para/quadrinhos'
  qb reinstall ${software_help_name} -u nome_de_usuário -clp '/caminho/para/quadrinhos'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			""
		;;

	radarr | sonarr)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  --4k             Define a instalação da compilação para 4k (padrão: 1080p)
  --nightly        Define a instalação da compilação na ramificação noturna (padrão: mais recente)" \
			"  qb install ${software_help_name} -u nome_de_usuário                   # Instala a instalação padrão (1080p)
  qb install ${software_help_name} -u nome_de_usuário --4k              # Instala a instalação 4k
  qb reinstall ${software_help_name} -u nome_de_usuário --nightly       # Reinstala a instalação noturna
  qb reinstall ${software_help_name} -u nome_de_usuário --4k            # Reinstala a instalação 4k
  qb remove ${software_help_name} -u nome_de_usuário                    # Remove a instalação padrão (1080p)
  qb remove ${software_help_name} -u nome_de_usuário --4k               # Remove a instalação 4k
  qb update ${software_help_name} -u nome_de_usuário                    # Atualiza instalação padrão (1080p)
  qb update ${software_help_name} -u nome_de_usuário --4k               # Atualizar instalação 4k

  ## Usar várias opções
  qb install ${software_help_name} -u nome_de_usuário --4k --nightly    # Instalar instalação 4k na ramificação nightly
  qb reinstall ${software_help_name} -u nome_de_usuário --4k --nightly  # Reinstalar instalação 4k na ramificação nightly
  qb update ${software_help_name} -u nome_de_usuário --4k --nightly     # Atualizar instalação 4k em ou para nightly" \
			""
		;;

	calibre | kavita)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username       Define o nome de usuário para ${software_title} (obrigatório)
  -lp | --library-path  Define o caminho do local para sua biblioteca (padrão: /home/nome_de_usuário/.config/${software_title}/library)" \
			"  qb install ${software_help_name} -u nome_de_usuário -lp '/caminho/para/biblioteca'
  qb reinstall ${software_help_name} -u nome_de_usuário -lp '/caminho/para/biblioteca'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			""
		;;

	plex)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u   | --username          Define o nome de usuário para ${software_title} (obrigatório)
  -pct | --plex-claim-token  Define o Plex Claim Token para ${software_title} (obrigatório para reivindicação rápida)
  -d   | --domain            Define o domínio para ${software_title}
  -D   | --data-dir          Define o diretório de dados para ${software_title} (padrão: /home/nome_de_usuário/.config/'Plex Media Server')" \
			"  qb install ${software_help_name} -u nome_de_usuário -pct 'reivindicação_token' -d 'plex.domain.com' -D '/caminho/para/dados'
  qb reinstall ${software_help_name} -u nome_de_usuário -pct 'reivindicação_token' -d 'plex.domain.com' -D '/caminho/para/dados'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			"
Observações:
  - O Plex Claim Token pode ser obtido em:
      https://www.plex.tv/claim/

  - Evite definir o diretório de dados para um diretório existente, como:
      /opt, /opt/nome_de_usuário, /mnt, /home, /home/nome_de_usuário e assim por diante.

  - É seguro criar um novo diretório de dados dentro de diretórios existentes, como:
      /opt/plex, /opt/nome_de_usuário/plex, /mnt/plex, /data/plex e assim por diante.

  - O diretório de dados será criado se não existir.

  - O diretório de dados será de propriedade do usuário e grupo do nome de usuário.

  - Ao instalar ou reinstalar com a opção de domínio, o proxy reverso Nginx será configurado automaticamente.
      * Certifique-se de que o domínio esteja apontando para o endereço IP do servidor e que os registros DNS adequados estejam definidos.

  - Ao atualizar, você será solicitado a inserir seu e-mail plex.tv, senha e código 2FA."
		;;

	bazarr)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  --4k             Define a instalação da compilação para 4k (padrão: 1080p)" \
			"  qb install ${software_help_name} -u nome_de_usuário             # Instala a instalação padrão (1080p)
  qb install ${software_help_name} -u nome_de_usuário --4k        # Instala a instalação 4k
  qb reinstall ${software_help_name} -u nome_de_usuário           # Reinstala a instalação padrão (1080p)
  qb reinstall ${software_help_name} -u nome_de_usuário --4k      # Reinstala a instalação 4k
  qb remove ${software_help_name} -u nome_de_usuário              # Remove a instalação padrão (1080p)
  qb remove ${software_help_name} -u nome_de_usuário --4k         # Remove a instalação 4k
  qb update ${software_help_name} -u nome_de_usuário              # Atualiza a instalação padrão (1080p)
  qb update ${software_help_name} -u nome_de_usuário --4k         # Atualizar instalação do 4k" \
			""
		;;

	autodl | phpmyadmin | x2go)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"" \
			"  qb install ${software_help_name}
  qb reinstall ${software_help_name}
  qb remove ${software_help_name}
  qb update ${software_help_name}" \
			""
		;;

	fail2ban)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"" \
			"  qb install ${software_help_name}
  qb reinstall ${software_help_name}
  qb remove ${software_help_name}" \
			""
		;;

	filebot)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u  | --username    Define o nome de usuário para ${software_title} (obrigatório)
  -mp | --media-path  Define o caminho de mídia para ${software_title} (padrão: /home/nome_de_usuário/Media)
  -o 'deluge'         Instala ${software_title} com integração Deluge
  -o 'nzbget'         Instala ${software_title} com integração NZBGet
  -o 'rtorrent'       Instala ${software_title} com integração rTorrent
  -o 'sabnzbd'        Instala ${software_title} com integração SABnzbd" \
			"  qb install ${software_help_name} -u nome_de_usuário
  qb reinstall ${software_help_name} -u nome_de_usuário
  qb remove ${software_help_name} -u nome_de_usuário

  ## Use várias opções
  qb install ${software_help_name} -u nome_de_usuário -o 'deluge' -o 'nzbget'
  qb reinstall ${software_help_name} -u nome_de_usuário -o 'rtorrent' -o 'sabnzbd'" \
			""
		;;

	jdownloader)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username       Define o nome de usuário para ${software_title} (obrigatório)
  -e | --email          Define o e-mail para ${software_title} (obrigatório) .i.
  -p | --password       Define a senha para ${software_title} (obrigatório) .ii.
  -D | --downloads-dir  Define o caminho de downloads para ${software_title} (padrão: /home/nome_de_usuário/Downloads)" \
			"  qb install ${software_help_name} -u nome_de_usuário -e 'email' -p 'senha' -D '/caminho/para/downloads'
  qb reinstall ${software_help_name} -u nome_de_usuário -e 'email' -p 'senha' -D '/caminho/para/downloads'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			"
Observações:
  - .i. O e-mail e a senha são necessários para a instalação do JDownloader.
      * .ii. estas são as credenciais para sua conta MyJDownloader."
		;;

	jellyseerr | komga | overseerr)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  -d | --domain    Define o domínio para ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com'
  qb reinstall ${software_help_name} -u nome_de_usuário -d '${software_help_name}.domain.com'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			"
Observações:
  - Ao instalar ou reinstalar com a opção domain [-d], o proxy reverso Nginx será configurado automaticamente.
      * Certifique-se de que o domínio esteja apontando para o endereço IP do servidor e que os registros DNS adequados estejam definidos."
		;;

	lecert)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  --dash         Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o painel do QuickBox
  --no-dash      Instala um certificado para um domínio personalizado especificado com '-d' (isso criará apenas o certificado)
  --emby         Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Emby
  --jellyfin     Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Jellyfin
  --jellyseerr   Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Jellyseerr
  --komga        Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Komga
  --overseerr    Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Overseerr
  --plex         Instala um certificado para o domínio especificado com '-d' e também criará um proxy reverso para o Plex
  -d | --domain  Defina o domínio para ${software_title}" \
			"  qb install ${software_help_name} --dash -d 'domain.com'
  qb reinstall ${software_help_name} --jellyseerr -d 'jellyseerr.domain.com' --jellyfin -d 'jellyfin.domain.com' --komga -d 'komga.domain.com'
  qb remove ${software_help_name} --plex -d 'plex.domain.com' --emby -d 'emby.domain.com'
  qb renew ${software_help_name} -d 'some.domain.com' -d 'another.domain.com'" \
			""
		;;

	lidarr | readarr)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  --nightly        Define a instalação da compilação na ramificação noturna (padrão: mais recente)" \
			"  qb install ${software_help_name} -u nome_de_usuário              # Instala a instalação padrão (mais recente)
  qb install ${software_help_name} -u nome_de_usuário --nightly    # Instala a instalação noturna
  qb reinstall ${software_help_name} -u nome_de_usuário            # Reinstala a instalação padrão (mais recente)
  qb reinstall ${software_help_name} -u nome_de_usuário --nightly  # Reinstala a instalação noturna
  qb remove ${software_help_name} -u nome_de_usuário               # Remove a instalação atual
  qb update ${software_help_name} -u nome_de_usuário               # Atualiza a instalação padrão (mais recente)
  qb update ${software_help_name} -u nome_de_usuário --nightly     # Atualiza de/para a instalação noturna" \
			""
		;;

	quota)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -qm | --quota-mount  Define o ponto de montagem do sistema para ${software_title} (obrigatório)" \
			"  qb install ${software_help_name} -qm '/caminho/para/ponto/de/montagem'
  qb reinstall ${software_help_name} -qm '/caminho/para/ponto/de/montagem'
  qb remove ${software_help_name}" \
			""
		;;

	rclone)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Defina o nome de usuário para ${software_title} (obrigatório)
  --dropbox        Instale ${software_title} com integração ao Dropbox
  --gdrive         Instale ${software_title} com integração ao Google Drive
  --encrypted      Instale ${software_title} com criptografia
  --beta           Instale a versão beta de ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário --dropbox
  qb install ${software_help_name} -u nome_de_usuário --beta --gdrive
  qb reinstall ${software_help_name} -u nome_de_usuário --dropbox --encrypted
  qb reinstall ${software_help_name} -u nome_de_usuário --gdrive
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			"
Observações:
  - É recomendado usar a opção --dropbox ou --gdrive em uma única passagem de instalação.
      * Isso evitará conflitos com a configuração do rclone.I

  - Ao instalar com a opção --dropbox ou --gdrive, a configuração do rclone será criada automaticamente.

  - Ao instalar com a opção --encrypted, a configuração do rclone será criptografada usando as informações especificadas.

  - Ao instalar com a opção --beta, a versão beta do rclone será instalada."
		;;

	requestrr | vpn)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)" \
			"  qb install ${software_help_name} -u nome_de_usuário
  qb reinstall ${software_help_name} -u nome_de_usuário
  qb remove ${software_help_name} -u nome_de_usuário" \
			""
		;;

	rtorrent)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username    Define o nome de usuário para ${software_title} (obrigatório)
  -o '0.15.1'        Instalar versão 0.15.1
  -o '0.10.0'        Instalar versão 0.10.0
  -o '0.9.8'         Instalar versão 0.9.8
  -o '0.9.7'         Instalar versão 0.9.7
  -o '0.9.6'         Instalar versão 0.9.6
  -o 'feature-bind'  Instalar a versão feature-bind de ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário -o '0.15.1'
  qb install ${software_help_name} -u nome_de_usuário -o '0.10.0'
  qb install ${software_help_name} -u nome_de_usuário -o '0.9.8'
  qb install ${software_help_name} -u nome_de_usuário -o '0.9.7'
  qb reinstall ${software_help_name} -u nome_de_usuário -o '0.9.6'
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário -o '0.10.0'
  qb update ${software_help_name} -u nome_de_usuário -o 'feature-bind'" \
			"
Observações:
  - O rTorrent é um aplicativo instalado globalmente e estará disponível para todos os usuários no servidor.

  - A versão feature-bind do rTorrent é uma compilação personalizada que inclui o recurso bind.
      * O recurso bind permite que você vincule o rTorrent a um endereço IP específico."
		;;

	rutorrent)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username    Define o nome de usuário para ${software_title} (obrigatório)
  --beta             Instala a versão beta do ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário
  qb reinstall ${software_help_name} -u nome_de_usuário
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário --beta" \
			"
Observações:
  - ruTorrent é um aplicativo instalado globalmente e estará disponível para todos os usuários no servidor.

  - ruTorrent é parte do processo de instalação do rTorrent e, ao instalar o rTorrent
    o ruTorrent será instalado com a versão mais recente por padrão. Se o rTorrent não estiver instalado,
    então o ruTorrent instalará a versão 0.9.8.

  - ruTorrent será instalado com a versão mais recente por padrão. Se você deseja instalar a versão beta,
    você pode usar a opção --beta. Tenha em mente que as duas versões nem sempre são diferentes."
		;;

	sabnzbd | thelounge | xteve)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  --beta           Instala a versão beta de ${software_title}" \
			"  qb install ${software_help_name} -u nome_de_usuário
  qb install ${software_help_name} -u nome_de_usuário --beta
  qb reinstall ${software_help_name} -u nome_de_usuário
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			""
		;;

	transmission)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)
  --v4             Instala a versão 4 de ${software_title} (padrão: versão 3)" \
			"  qb install ${software_help_name} -u nome_de_usuário --v4
  qb reinstall ${software_help_name} -u nome_de_usuário --v4
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário --v4" \
			""
		;;

	wireguard)
		has_update=0
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u   | --username            Define o nome de usuário para ${software_title} (obrigatório)
  -o [client|server]           Instala o WireGuard como um cliente ou servidor
  -cai  | --client-allowed-ip  Define o IP permitido para o servidor WireGuard
  -cidr | --cidr               Define o CIDR para o servidor WireGuard (padrão: 10.5.0.2/16)
  -dns  | --dns                Define o DNS para o servidor WireGuard (padrão: 1.1.1.1)
  -ep   | --endpoint           Define o ponto de extremidade para o servidor WireGuard
  -lp   | --listen-port        Define a porta de escuta para o servidor WireGuard (padrão: 51820)
  -noc  | --number-of-clients  Define o número de clientes para o servidor WireGuard
  -pdr  | --postdown-rule      Define a regra post-down para o servidor WireGuard
  -pur  | --postup-rule        Define a regra post-up para o servidor WireGuard" \
			"  qb install ${software_help_name} -u nome_de_usuário -o server \\
  -cai '192.168.0.2,192.168.0.3' \\
  -cidr '10.5.0.2/16' \\
  -dns '0.0.0.0' \\
  -ep 'server.domain.com' \\
  -lp 51820 \\
  -noc 5 \\
  -pdr 'iptables -D INPUT -i wg0 -j ACCEPT' \\
  -pur 'iptables -A INPUT -i wg0 -j ACCEPT'
  qb reinstall ${software_help_name} -u nome_de_usuário -o client
  qb remove ${software_help_name} -u nome_de_usuário" \
			"
Observações:
  - O servidor WireGuard será instalado com o CIDR padrão de 10.5.0.2/16,
    DNS de 1.1.1.1, 1 configuração de cliente e porta de escuta de 51820.

  - O servidor WireGuard será instalado com as regras post-down e post-up padrão.
      * A regra post-down removerá a regra iptables para o servidor WireGuard.
      * A regra post-up adicionará a regra iptables para o servidor WireGuard.

  - A opção '-noc' especifica o número de clientes para os quais criar configurações.
    Essas configurações serão salvas no diretório '/srv/quickbox/db/wireguard'.

  - A maioria dos provedores de VPN fornece um arquivo de configuração para o WireGuard.
    Se você estiver usando o NordVPN, que não fornece um arquivo de configuração diretamente,
    você pode gerar um usando o gerador de configuração NordVPN incluído.
    Para obter mais informações sobre como gerar um arquivo de configuração NordVPN,
    use o comando: nvpn_conf_gen -h"
		;;

	*)
		has_update=1
		generate_help_text "${software_title}" "${software_help_name}" "${has_update}" \
			"  -u | --username  Define o nome de usuário para ${software_title} (obrigatório)" \
			"  qb install ${software_help_name} -u nome_de_usuário
  qb reinstall ${software_help_name} -u nome_de_usuário
  qb remove ${software_help_name} -u nome_de_usuário
  qb update ${software_help_name} -u nome_de_usuário" \
			""
		;;
	esac
}
