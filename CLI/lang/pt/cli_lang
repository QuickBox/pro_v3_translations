#!/usr/bin/env bash
################################################################################
# <START METADATA>
# Project Name: QuickBox Pro
# File Name: quickbox_lang_pt
# File Description: Portuguese (Brazil) language file
# File Version: 1.0.101
#
# Save Tasks:
# Automated_Versioning: true
#
# Build Tasks:
# Automated_Comment_Strip: true
#
# Deploy Tasks:
# Automated_Encryption: false
#
# Author: Jason Matthews (JMSolo)
# Author Contact: support@quickbox.io
# Author: Jamie Dobbs (Mschf)
# Author Contact: jamie.dobbs@mschf.dev
#
# License: BSD-3 (Available in LICENSE.md)
# Copyright (C) 2019-2023, QuickBox.IO
# All rights reserved.
# <END METADATA>
# shellcheck disable=2034,2154,2312
################################################################################

quickbox::dashboard::log() {
	admin_name="$(quickbox::database "SELECT username FROM user_information WHERE user_level = '10';")"
	if [[ ! -f "/srv/quickbox/logs/dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch /srv/quickbox/logs/dashboard
		chown www-data:www-data /srv/quickbox/logs/dashboard
	fi
	if [[ ! -f "/srv/quickbox/logs/${username:-${admin_name}}.dashboard" ]]; then
		mkdir -p /srv/quickbox/logs
		touch "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
		chown www-data:www-data "/srv/quickbox/logs/${username:-${admin_name}}.dashboard"
	fi
	if [[ -n ${username} ]]; then
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${username:-}.dashboard"
	else
		echo "${1:-null}" | sed -z "s/\n/\n<br>/" >"/srv/quickbox/logs/${admin_name:-}.dashboard"
	fi
	echo "${1:-null}"
}
################################################################################
# Clean
################################################################################
quickbox::lang::clean::memory() {
	declare text="memória de limpeza cache..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone() {
	declare text="registro de upload do rclone de limpeza..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::rclone::error() {
	declare text="erro: arquivo de log não presente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::clean::dashboard() {
	declare text="aguardando resposta do sistema"
	quickbox::dashboard::log "${text}"
}
################################################################################
# Locks
################################################################################
quickbox::lang::lock::handle() {
	declare text="${quickbox_lock} está correndo atualmente
o processo será retomado quando ${quickbox_lock} terminar"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lock::remove() {
	declare text="removendo fechaduras de software..."
	quickbox::dashboard::log "${text}"
}

################################################################################
# Apt
################################################################################
quickbox::lang::apt::update::header() {
	declare text="verificação e execução de atualizações apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::db::locked() {
	declare text="tentando resolver a fechadura dpkg..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::update::completed() {
	declare text="apt-get upgrade concluído com sucesso"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::apt::check::failed() {
	declare text="apt-get check falhou, você pode ter quebrado pacotes"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Install
################################################################################
quickbox::lang::install::header() {
	declare text="${software_title} será agora instalado
este processo pode levar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rutorrent::header() {
	rtorrent_count=$(quickbox::software::count rtorrent)
	if [[ ${rtorrent_count} -eq 0 ]]; then
		declare text="parece que o rTorrent não está instalado

rTorrent 0.9.8 será agora instalado, por favor aguarde
demorar alguns minutos (dependendo das especificações do sistema) para instalar"
	else
		declare text="${software_title} será agora instalado
este processo pode levar alguns minutos..."
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::sources::header() {
	declare text="adicionando chaves e fontes adicionais por ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::dependencies::header() {
	declare text="instalando ${software_title} dependências..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::build::header() {
	declare text="construindo ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::mktorrent::header() {
	declare text="construindo mktorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::xmlrpc::header() {
	declare text="construindo xmlrpc-c..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::libtorrent::header() {
	declare text="construindo libtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::rtorrent::header() {
	declare text="construindo rtorrent..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::certificate::header() {
	declare text="criando certificado SSL para ${d}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::lecert::header() {
	declare text="configurando NGinx para Let's Encrypt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::configure::header() {
	declare text="configurando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::backup::header() {
	declare text="backup de ${software_title} configuração..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::start::header() {
	declare text="começando em ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::install::complete::header() {
	declare text="${software_title} instalação completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Reinstall
################################################################################
quickbox::lang::reinstall::header() {
	declare text="${software_title} será reinstalado agora
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::reinstall::complete::header() {
	declare text="${software_title} reinstalação completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Remove
################################################################################
quickbox::lang::remove::header() {
	declare text="${software_title} será agora removido
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::stop::header() {
	declare text="parando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::dependencies::header() {
	declare text="removendo ${software_title} dependências..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::files::header() {
	declare text="removendo ${software_title} arquivos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::complete::header() {
	declare text="${software_title} remoção completa"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Update
################################################################################
quickbox::lang::update::header() {
	declare text="${software_title} será agora atualizado
este processo pode demorar alguns minutos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::header() {
	declare text="atualizando ${software_title}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete::header() {
	declare text="${software_title} atualização completa"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::files::admin() {
	declare text="deve estar logado como administrador para atualizar ${software_title}"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Renew - Let's Encrypt
################################################################################
quickbox::lang::install::lecert::complete() {
	declare -a domain_array
	if [[ "${qb_option[*]:-}" == *"dash"* ]]; then
		domain_array+=("https://${domain_options[dash]}")
		application_array+=("QuickBox")
	fi
	if [[ "${qb_option[*]:-}" == *"emby"* ]]; then
		domain_array+=("https://${domain_options[emby]}")
		application_array+=("Emby")
	fi
	if [[ "${qb_option[*]:-}" == *"jellyfin"* ]]; then
		domain_array+=("https://${domain_options[jellyfin]}")
		application_array+=("Jellyfin")
	fi
	if [[ "${qb_option[*]:-}" == *"jellyseerr"* ]]; then
		domain_array+=("https://${domain_options[jellyseerr]}")
		application_array+=("Jellyseerr")
	fi
	if [[ "${qb_option[*]:-}" == *"komga"* ]]; then
		domain_array+=("https://${domain_options[komga]}")
		application_array+=("Komga")
	fi
	if [[ "${qb_option[*]:-}" == *"overseerr"* ]]; then
		domain_array+=("https://${domain_options[overseerr]}")
		application_array+=("Overseerr")
	fi
	if [[ "${qb_option[*]:-}" == *"plex"* ]]; then
		domain_array+=("https://${domain_options[plex]}")
		application_array+=("Plex")
	fi
	if [[ "${qb_option[*]:-}" == *"no-dash"* ]]; then
		domain_array+=("${domain}")
		application_array+=("o domínio personalizado foi")
	fi
	for ((i = 0; i < ${#domain_array[@]}; i++)); do
		declare text="certificado SSL para ${application_array[i]} instalado.
domínio: ${domain_array[i]}"
	done
	quickbox::dashboard::log "${text}"
}

quickbox::lang::renew::certificates::header() {
	declare text="o processo de renovação do certificado SSL começará agora"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::renew::complete::header() {
	declare text="renovação do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lecert::renew() {
	# divide domain entries with commas and set final entry to "and"
	for ((i = 0; i < ${#domain[@]}; i++)); do
		if [[ ${i} -eq 0 ]]; then
			declare text="${domain[i]}"
		elif [[ ${i} -eq $((${#domain[@]} - 1)) ]]; then
			declare text="${text} e ${domain[i]}"
		else
			declare text="${text}, ${domain[i]}"
		fi
	done
	declare text="renovando certificado SSL para ${text}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::lecert::renew::info() {
	created_array="${certificate_created}"
	expires_array="${certificate_expiry}"
	days_left_array="${certificate_days_left}"
	# create certificate info header for completion message
	declare text_header="
Informações do certificado:
"
	declare text="domínio: ${d}
criado: ${created_array[*]}
expira: ${expires_array[*]}
dias restantes:: ${days_left_array[*]}
"
	# show text_header only once for multiple domains
	if [[ ${d} == "${domain[0]}" ]]; then
		quickbox::dashboard::log "${text_header}
${text}"
	else
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::reinstall::lecert::complete::header() {
	declare text="reinstalação do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::remove::cert::complete::header() {
	declare text="remoção do certificado SSL concluída"
	quickbox::dashboard::log "${text}"
}

################################################################################
# User
################################################################################
quickbox::lang::user::create() {
	declare text="criado pelo usuário do quickbox:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::delete() {
	declare text="${username:-"usuário da quickbox"} apagado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::username() {
	declare text="usuário: ${username}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password() {
	declare text="senha: ${password}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::password::updated() {
	declare text="senha do ${username:-"usuário da quickbox"} atualizada"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::ban() {
	declare text="${username:-"usuário da quickbox"} banido"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::unban() {
	declare text="${username:-"usuário da quickbox"} não-distribuído"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::demote() {
	declare text="${username:-"usuário da quickbox"} despromovido de admin"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::user::promote() {
	declare text="${username:-"usuário da quickbox"} promovido à admin"
	quickbox::dashboard::log "${text}"
}

################################################################################
# Misc
################################################################################
quickbox::lang::username::specified() {
	declare text="erro: nome de usuário não especificado"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::example() {
	if [[ ${process} == "install" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${jellyseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "reinstall" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${usr} && -n ${dmn} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${emby_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${jellyfin_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${jellyseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${komga_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${overseerr_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -n ${dmn} && ${plex_dmn} == 1 ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	elif [[ ${process} == "renew" ]]; then
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} -d domain.com"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="qb ${process} ${software_name} -u usuário ${option[*]}"
		[[ -n ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]} -d domain.com"
		[[ -z ${usr} && -z ${dmn} ]] && declare text="qb ${process} ${software_name} ${option[*]}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::info::note() {
	[[ ${software_name} == "bazarr" && ${is4k} == 1 ]] && declare software_name="bazarr4k"
	[[ ${software_name} == "radarr" && ${is4k} == 1 ]] && declare software_name="radarr4k"
	[[ ${software_name} == "sonarr" && ${is4k} == 1 ]] && declare software_name="sonarr4k"
	if [[ ${process} == "install" ]]; then
		if [[ ${software_name} == "filebot" ]]; then
			[[ -n ${usr} ]] && declare text="instala a versão ${branch} mais recente do ${software_name} para o usuário"
			[[ -n ${usr} && -n ${deluge} ]] && declare text="estágios de script de pós-processamento para Deluge"
			[[ -n ${usr} && -n ${nzbget} ]] && declare text="estágios de script de pós-processamento para NZBGet"
			[[ -n ${usr} && -n ${rtorrent} ]] && declare text="estágios de script de pós-processamento para rTorrent"
			[[ -n ${usr} && -n ${sabnzbd} ]] && declare text="estágios de script de pós-processamento para SABnzbd"
			[[ -n ${usr} && -n ${media_path} ]] && declare text="define o caminho da mídia (ex: /path/to/media)"
		else
			[[ -n ${usr} ]] && declare text="instala a versão mais recente do ${branch} do ${software_name} para o usuário"
			[[ -n ${rclone_remote} ]] && declare text="instala a versão ${branch} mais recente de ${software_name} para o usuário usando ${rclone_remote}"
			[[ -n ${encrypted} ]] && declare text="instala a versão ${branch} mais recente do ${software_name} para o usuário com criptografia"
			[[ -n ${dmn} ]] && declare text="instala um certificado ssl a ser usado para o painel no domínio especificado"
			[[ -n ${usr} && -n ${dmn} ]] && declare text="instala a versão mais recente do ${branch} do ${software_name} para o usuário e prepara o certificado ssl para o domínio"
			[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="instala um certificado ssl para o domínio especificado"
			[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio emby especificado"
			[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio jellyfin especificado"
			[[ -n ${no-dash} && ${jellyseerr_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio jellyseerr especificado"
			[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio komga especificado"
			[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio overseerr especificado"
			[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="instala um certificado ssl para o domínio plex especificado"
			[[ -n ${version} ]] && declare text="instala a versão ${version[*]} mais recente de ${software_name}"
			[[ -n ${branch} && -z ${usr} ]] && declare text="instala a versão mais recente de ${branch} de ${software_name}"
			[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="instala a versão ${branch} mais recente de ${software_name} com diretório de dados atribuído"
			[[ -n ${library_path} ]] && declare text="instala ${software_name} com o diretório de biblioteca atribuído"
		fi
	elif [[ ${process} == "reinstall" ]]; then
		if [[ ${software_name} == "filebot" ]]; then
			[[ -n ${usr} ]] && declare text="reinstala a versão ${branch} mais recente do ${software_name} para o usuário"
			[[ -n ${usr} && -n ${deluge} ]] && declare text="estágios de script de pós-processamento para Deluge"
			[[ -n ${usr} && -n ${nzbget} ]] && declare text="estágios de script de pós-processamento para NZBGet"
			[[ -n ${usr} && -n ${rtorrent} ]] && declare text="estágios de script de pós-processamento para rTorrent"
			[[ -n ${usr} && -n ${sabnzbd} ]] && declare text="estágios de script de pós-processamento para SABnzbd"
			[[ -n ${usr} && -n ${media_path} ]] && declare text="define o caminho da mídia (ex: /path/to/media)"
		else
			[[ -n ${usr} ]] && declare text="reinstala a versão mais recente do ${branch} de ${software_name} para o usuário"
			[[ -n ${rclone_remote} ]] && declare text="reinstala a versão ${branch} mais recente de ${software_name} para o usuário usando ${rclone_remote}"
			[[ -n ${encrypted} ]] && declare text="reinstala a versão ${branch} mais recente do ${software_name} para o usuário com criptografia"
			[[ -n ${dmn} ]] && declare text="reinstala o certificado ssl usado para o painel no domínio especificado"
			[[ -n ${usr} && -n ${dmn} ]] && declare text="reinstala a versão mais recente do ${branch} do ${software_name} para o usuário e prepara o certificado ssl para o domínio"
			[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="reinstala um certificado ssl para o domínio especificado"
			[[ -n ${no-dash} && ${emby_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio emby especificado"
			[[ -n ${no-dash} && ${jellyfin_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio jellyfin especificado"
			[[ -n ${no-dash} && ${jellyseerr_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio jellyseerr especificado"
			[[ -n ${no-dash} && ${komga_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio komga especificado"
			[[ -n ${no-dash} && ${overseerr_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio overseerr especificado"
			[[ -n ${no-dash} && ${plex_dmn} == 1 ]] && declare text="reinstala um certificado ssl para o domínio plex especificado"
			[[ -n ${version} ]] && declare text="reinstala a versão ${version[*]} mais recente de ${software_name}"
			[[ -n ${branch} && -z ${usr} ]] && declare text="reinstala a versão mais recente de ${branch} de ${software_name}"
			[[ -n ${data} && -n ${option[1]:="-o data=.*[*]"} ]] && declare text="reinstala a versão ${branch} mais recente de ${software_name} com diretório de dados atribuído"
			[[ -n ${library_path} ]] && declare text="reinstala ${software_name} com o diretório de biblioteca atribuído"
		fi
	elif [[ ${process} == "remove" ]]; then
		[[ -n ${usr} ]] && declare text="remove ${software_name} para usuário"
		[[ -n ${dmn} && -z ${usr} && -z ${version} ]] && declare text="remove o certificado ssl do domínio especificado"
		[[ -n ${version} && -z ${dmn} ]] && declare text="remove ${software_name}"
		[[ -z ${usr} && -z ${version} && -z ${dmn} ]] && declare text="remove ${software_name}"
	elif [[ ${process} == "renew" ]]; then
		[[ -n ${dmn} ]] && declare text="renova o certificado SSL do domínio especificado"
	elif [[ ${process} == "update" ]]; then
		[[ -n ${usr} ]] && declare text="atualiza ${software_name} para a versão mais recente do ${branch} para o usuário"
		[[ -n ${dmn} ]] && declare text="atualiza o certificado ssl para o domínio especificado, a ser usado com o painel"
		[[ -n ${no-dash} && -z ${usr} && -z ${dmn} && -z ${version} ]] && declare text="atualiza o certificado ssl para o domínio especificado"
		[[ -n ${version} ]] && declare text="atualiza ${software_name} para a versão mais recente de ${version}"
		[[ -n ${branch} && -z ${usr} ]] && declare text="atualiza a versão mais recente de ${branch} de ${software_name}"
		[[ ${software_name} == "deluge" ]] && declare text="atualiza ${software_name} para a versão mais recente de ${branch} para todos os usuários"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::mu::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::airsonic::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
nome de usuário: admin
senha: admin
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::calibre::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}
nome de usuário: ${username}
senha: admin123
localização do banco de dados: ${software_library_directory}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::jdownloader::access() {
	declare text="acesso ${software_title} em:
https://my.jdownloader.org/
local de download: ${software_downloads_directory}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rtorrent::access() {
	declare text="> versão rTorrent: ${rtorrent_version}
> versão libtorrent: ${libtorrent_version}
> caminho do soquete: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rutorrent::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${software_name}
> caminho do soquete: /var/run/${admin_name}/.rtorrent.sock"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::admin::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${admin_name}/${software_name}
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::database() {
	declare text="atualizando o banco de dados..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::disable() {
	declare text="desativando rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::trackers::enable() {
	declare text="possibilitando rastreadores públicos..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::directory::noexist() {
	declare text="diretório necessário não existe..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::directory::nomove() {
	declare text="incapaz de passar para $1..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::package::fail() {
	declare text="não pôde instalar um pacote necessário $1..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::flaresolverr::access() {
	curl_check=$(curl -s "127.0.0.1:${software_web_port}" | grep -o "FlareSolverr is ready!")
	if [[ ${curl_check} == "FlareSolverr is ready!" ]]; then
		declare text="status: ok. FlareSolverr está pronto!
${software_title} instalado na porta: ${software_web_port}"
		quickbox::dashboard::log "${text}"
	else
		declare text="Parece que algo deu errado"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::jellyfin::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyfin_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesse ${software_title} em:
https://${jellyfin_web_root}/"
	else
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::notifiarr::access() {
	if [[ ${#notifiarr_user_password} -lt 9 ]]; then
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}
nome de usuário: ${username}
senha: ${notifiarr_user_password}

Nota: Sua senha tem menos de 9 caracteres.
      O Notifiarr exige que as senhas tenham pelo menos 9 caracteres.
      Eu modifiquei isso para adicionar caracteres aleatórios adicionais.
      Você pode fazer login usando a senha fornecida e alterá-la nas configurações.
      -------------------------------------------------------
      Para sua conveniência, a nova senha está localizada em:
      /home/${username}/.config/Notifiarr/config/.notifiarr.pass.txt"
		quickbox::dashboard::log "${text}"
	else
		declare text="acesse ${software_title} em:
${quickbox_web_root}${username}/${software_name}
${software_title} instalado na porta: ${software_web_port}
nome de usuário: ${username}
senha: ${notifiarr_user_password}"
		quickbox::dashboard::log "${text}"
	fi
}

quickbox::lang::software::novnc::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}vnc/vnc.html?resize=remote&path=${username}/websockify
${software_title} instalado na porta: ${software_web_port}"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::jellyseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		jellyseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesso ${software_title} em:
https://${jellyseerr_web_root}/"
	else
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="acesso ${software_title} em:
http://${server_ip}:${software_web_port}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::overseerr::access() {
	if [[ -n ${domain:-} ]]; then
		# trunk-ignore(shellcheck/SC2001)
		overseerr_web_root=$(echo "${domain:-}" | sed 's:/*$::')
		declare text="acesso ${software_title} em:
https://${overseerr_web_root}/"
	else
		server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
		declare text="acesso ${software_title} em:
http://${server_ip}:${software_web_port}/
${software_title} instalado na porta: ${software_web_port}"
	fi
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex_directory_warning() {
	declare text="o diretório de dados customizado: '${software_install_directory}' já existe.
usando '${software_install_directory}/plex' em vez disso."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexclaim() {
	declare text="reivindicando servidor plex para ${username}..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plex::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}web/
${software_title} instalado na porta: ${software_web_port}

> se ainda não o fez, ou se não tem a certeza de como 
reclamar o seu servidor plex por favor siga este guia:
https://quickbox.io/kb-categories/plex/"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_header() {
	declare text="Por favor, digite suas credenciais Plex (Nome de usuário/Senha/2FA):"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_subheader() {
	declare text="Estas credenciais não serão salvas ou compartilhadas fora desta instância."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_email() {
	declare text="Email: "
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_password() {
	declare text="Senha: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_otp() {
	declare text="2FA: [Deixar em branco se não houver conjunto 2FA] "
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_fail() {
	declare text="O nome de usuário e a senha são necessários para fazer o download da atualização do PlexPass."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_incorrect() {
	declarar text="Nome de usuário e/ou senha incorretos"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_loginfail() {
	declare text="Falha no login, depuração de informações:"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_retrievefail() {
	declare text="Incapaz de recuperar a URL de download."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_credentials_parsefail() {
	declare text="Falha na análise da resposta HTML."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_downloading() {
	declare text="Fazendo o download da atualização do Plex..."
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_downloading_fail() {
	declare text="O download falhou com código de erro ${code}, ${error}"
	quickbox::painel::log "${text}"
}

quickbox::lang::software::plexupdate_installing() {
	declare text="Instalando a nova versão do Plex..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_updated() {
	declare text="O Plex foi atualizado com sucesso."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::plexupdate_current() {
	declare text="Plex já está em dia."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::pyload::access() {
	declare text="acesso ${software_title} em:
${quickbox_web_root}${username}/${software_name}/
${software_title} instalado na porta: ${software_web_port}

> nome de usuário = ${username}
> senha = pyload

> Login para fazer o pyload e alterar a senha padrão de segurança.
Sua senha pode ser alterada sob a guia [usuários] em pyload."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::build::python311() {
	declare text="instalando o python 3.11, aguarde, pois isso pode demorar um pouco ..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::quassel::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} instalado na porta: ${software_daemon_port}
  
> Por favor, instale o quassel-cliente em seu cliente pessoal 
computador e conecte-se ao recém-criado ${software_title} Núcleo 
para configurar sua conta em:
${server_ip}:${software_daemon_port}

> Baixar quassel-cliente a partir do seguinte:
https://quassel-irc.org/downloads"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::rclone_configure() {
	declare text="
Por favor, visite https://console.developers.google.com e crie um projeto.
Você precisará tomar nota de seu client_id e client_secret.
Você também pode visitar o artigo abaixo da Base de Conhecimento para uma caminhada:
https://quickbox.io/knowledge-base/creating-a-google-api-client-id-client-secret-code/

Uma vez que você tenha tanto seu client_id quanto client_secret, pressione qualquer tecla para continuar.

"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_entries() {
	declare text="Digite abaixo os detalhes de sua conexão."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid() {
	declare text="Identificação do cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret() {
	declare text="Segredo do cliente: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass() {
	declare text="Senha de encriptação: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass() {
	declare text="Senha de sal: "
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_salterror() {
	declare text="A senha de sal não pode ser a mesma que a senha de criptografia."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_confirm() {
	declare text="Favor confirmar os seguintes detalhes antes de continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientid_confirm() {
	declare text="Identificação do cliente: ${clientvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_clientsecret_confirm() {
	declare text="Segredo do cliente: ${secretvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_encryptpass_confirm() {
	declare text="Senha de encriptação: ${encvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_saltpass_confirm() {
	declare text="Senha de sal: ${saltvar}"
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone_continue() {
	declare text="Se estiver satisfeito com os ajustes acima, pressione Y para continuar..."
	quickbox::dashboard::log "${text}"
}
quickbox::lang::software::rclone::access() {
	declare text="${software_title} instalado

> Para obter mais informações sobre como instalar o rclone, visite:
https://quickbox.io/knowledge-base/applications/rclone/how-to-install-rclone/
"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::build::sabnzbd::par2cmdline() {
	declare text="instalando par2cmdline, aguarde, pois isso pode demorar um pouco..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::sonarrv4::update::error() {
	declare text
	text="$(tput setaf 7)Sonarr v4 $(tput setaf 1)não pode$(tput setaf 7) ser atualizado de v3.
Desinstale a v3 e instale a v4.$(tput sgr0)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::vpnzip::access() {
	declare text="baixar o perfil ${software_title} em:
${quickbox_web_root}${username}/ovpn.zip
> para usar em qualquer cliente OpenVPN"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::x2go::access() {
	server_ip=$(ip route get 8.8.8.8 | sed -n '/src/{s/.*src *\([^ ]*\).*/\1/p;q}')
	declare text="${software_title} Servidor instalado

> Instale o x2go-client em seu computador pessoal
e conecte-se ao servidor ${software_title} recém-criado
usando o seguinte:
Anfitrião:			${server_ip}
Login:				${username}
Porta SSH:			4747
Tipo de sessão:		XFCE ou MATE

> Faça o download do x2go-client a partir do seguinte:
https://wiki.x2go.org/doku.php/doc:installation:x2goclient"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::software::znc_configure() {
	declare text="A configuração ZNC será executada agora. Por favor, responda as seguintes perguntas:"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Updater
################################################################################
quickbox::lang::update::ntp() {
	declare text="verificando com o servidor ntp..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::apt() {
	declare text="executando atualizações do apt..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::initial::dependencies() {
	declare text="verificando as dependências iniciais..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::download::v3() {
	declare text="baixando atualização v3..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::quickbox::dependencies() {
	declare text="verificando as dependências do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::base::dependencies() {
	declare text="instalando dependências de base: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::web::dependencies() {
	declare text="instalando dependências da web: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::python::dependencies() {
	declare text="instalando dependências python: "
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dependencies::log() {
	declare text="salvando dependências instaladas..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::pip() {
	declare text="atualizando pip..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::lshell() {
	declare text="atualizando lshell..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::iris() {
	declare text="atualizando íris..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::libraries() {
	declare text="atualizando bibliotecas quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::cron() {
	declare text="atualizando cron jobs..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::sudo() {
	declare text="atualizando as configurações do sudo..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::curl() {
	declare text="atualizando curl..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::php::check() {
	declare text="verificando php..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::qbcommands() {
	declare text="configurando comandos do quickbox pro..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::dashboard() {
	declare text="atualizando o painel do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::database() {
	declare text="atualizando banco de dados quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::services() {
	declare text="verificando e atualizando arquivos de serviço de software instalados..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::autocomplete() {
	declare text="atualizando o preenchimento automático do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::manpage() {
	declare text="atualizando a página de manual do quickbox..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::permissions() {
	declare text="configurando permissões..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::clean() {
	declare text="limpando arquivos de atualização..."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::update::complete() {
	declare text="atualização concluída!"
	quickbox::dashboard::log "${text}"
}

################################################################################
# QB Manager - /opt/quickbox/system/manage :: `-s` | case: software)
################################################################################

### `-o backup` | case: backup)

quickbox::lang::backup::configf() {
	declare text="o arquivo de configuração para ${software_name} agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::error() {
	declare text="arquivo de configuração ${softwareConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configf::success() {
	declare text="foi feito backup do arquivo de configuração."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::error() {
	declare text="${software_title} diretório de instalação não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir() {
	declare text="o diretório de instalação para ${software_title} (${backup_version}) agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::configdir() {
	declare text="o diretório de configuração para ${software_title} agora está sendo copiado."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::backup::installdir::success() {
	backup_version="$(tput setaf 5)${backup_version}$(tput setaf 2)"
	declare text="${software_title} (${backup_version}) foi copiado."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o restore` | case: restore)

quickbox::lang::restore::configf::error() {
	declare text="arquivo de backup ${backupConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::restore::configf::success() {
	declare text="o arquivo de backup foi restaurado."
	quickbox::dashboard::log "${text}"
}

### `-o default` | case: default)

quickbox::lang::default::configf::error() {
	declare text="o arquivo de configuração padrão ${defaultConf} não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::default::configf::success() {
	declare text="o arquivo de configuração padrão foi restaurado."
	quickbox::dashboard::log "${text}"
}

### `-o rollback` | case: rollback)

quickbox::lang::rollback::installdir::error() {
	declare text="${software_title} diretório de instalação não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::version() {
	declare texto="versão:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::date() {
	declare text="data:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection() {
	declare text="selecione um número na lista abaixo para reverter
para uma versão anterior de ${software_title}:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::invalid() {
	declare text="seleção inválida. por favor, tente novamente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::software::error() {
	declare text="${software_title} o backup do aplicativo não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::config::error() {
	declare text="${software_title} backup de configuração não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="você selecionou a versão ${version} para ${software_title}.
pacote de aplicativos: ${app_package}
pacote de configuração: ${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::selection::confirm() {
	declare text="tem certeza que deseja prosseguir com a reversão? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::cancelled() {
	declare text="reversão cancelada."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::rollback::continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} agora está sendo revertido para a versão ${version}."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::rollback::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} (${version}) foi revertido."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

### `-o delete` | case: delete)

quickbox::lang::delete::selection::version() {
	declare texto="versão:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::date() {
	declare text="data:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection() {
	declare text="selecione um número da lista abaixo para deletar
um backup anterior de ${software_title}:"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::invalid() {
	declare text="seleção inválida. por favor, tente novamente."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::software::error() {
	declare text="${software_title} backup de aplicativo não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::config::error() {
	declare text="${software_title} backup de configuração não existe."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::selection::display() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	app_package="$(tput setaf 5)${app_package}$(tput setaf 7)"
	config_package="$(tput setaf 5)${config_package}$(tput setaf 7)"
	declare text="você selecionou a versão ${version} para ${software_title}.
pacote de aplicativos: ${app_package}
pacote de configuração: ${config_package}"
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::selection::confirm() {
	declare text="tem certeza que deseja prosseguir com a exclusão? (s/n)"
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::cancelled() {
	declare text="exclusão de backup cancelada."
	quickbox::dashboard::log "${text}"
}

quickbox::lang::delete::continue() {
	version="$(tput setaf 5)${version}$(tput setaf 7)"
	declare text="${software_title} backup (${version}) agora está sendo excluído."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}

quickbox::lang::delete::complete() {
	version="$(tput setaf 5)${version}$(tput setaf 2)"
	declare text="${software_title} backup (${version}) foi deletado."
	quickbox::dashboard::log "${text}$(tput sgr0)"
}
